[{"id":253,"title":"Announcing the Strapi starter CLI","slug":"announcing-the-strapi-starter-cli","publishedAt":"2021-03-26T15:30:00.000Z","status":"published","content":"There are several ways to start a project with Strapi. You can create a blank project from scratch or use one of our [starters](https://strapi.io/starters) to spin up a corporate website, a portfolio, an e-commerce solution, a blog, or a catalog using the frontend technology of your choice (Next.js, Gatsby, Gridsome, Nuxt.js).\n\nCreating **full stack Strapi applications with starters** just got easier 🙌 Now, with **one command**, you can have a monorepo running your starter frontend and Strapi backend in minutes.\n\nHow to use the starter CLI\n--------------------------\n\nThere are two ways to use the CLI.\n\nThe GitHub URL of the Strapi starter :\n\n```\n# yarn\nyarn create strapi-starter my-project https://github.com/strapi/strapi-starter-gatsby-blog\n\n# npx\nnpx create-strapi-starter my-project https://github.com/strapi/strapi-starter-gatsby-blog\n\n```\n\nor a shortcut to the Github repository:\n\n```\n# yarn\nyarn create strapi-starter my-project gatsby-blog\n\n# npx\nnpx create-strapi-starter my-project gatsby-blog\n\n```\n\n*Pro tip: You can create a project from a specific branch with a url like this:*\n`https://github.com/strapi/strapi-starter-gatsby-blog/tree/<my-branch>`\n\nThe CLI will create a monorepo, install dependencies, and run the project automatically. In the end, you will have a file structure that looks similar to this:\n\n```\n/my-project\n  /frontend // strapi-starter\n  /backend // strapi-template\n\n```\n\nWe've created several starters ready for you to use right now. Check them out on our [starters page](https://strapi.io/starters).\n![starters screenshot.png](/uploads/starters_screenshot_65446abbea.png)\n\nWe are always expanding our starter catalog, so let us know what we should build next in the comments below.\n\nHow it works\n------------\n\nEssentially the CLI connects a strapi-starter with a strapi-template. For this to work, every starter repository must contain a `starter.json` file and a `starter` directory.\n\nThe `starter.json` references the template (Strapi backend) to be used, and the `starter` directory contains all the files and folders for the chosen frontend (i.e. Gatsby).\n\n```\n/starter // Frontend files and folders are in here\nstarter.json // {\"template\": \"github.com/some-strapi-template\"}\n\n```\n\nFor example, when you run the command `yarn create strapi-starter my-project gatsby-blog` , the CLI will fetch the strapi-starter-gatsby-blog, copy the contents of the `starter`directory into `my-project/frontend` and start installing dependencies.\n\nThen it will read the `starter.json` file, fetch the strapi-template-blog and build a new Strapi application at `my-project/backend`.\n\nFinally, the CLI will run both backend and frontend applications simultaneously and you will be able to access them in the browser.\n\nHere's a video tutorial to help you get started with the CLI: \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ilZ4trRi9SQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nHow to use your own starter\n---------------------------\n\nMaybe you've already developed your own starters and templates, you want to remix one of ours, or you want to create a new one!\n\nYou can still use the CLI to bootstrap your own starter projects. Just be sure to follow the file structure mentioned above.\n\nOne thing to keep in mind here is that if you want to use the shortcut, you will need to name your starter `strapi-starter-<frontend-type>-<template-type>` and specify your username in the command:\n\n```\n# yarn\nyarn create strapi-starter my-project markkaylor/gatsby-catalog\n\n# npx\nnpx create-strapi-starter my-project markkaylor/gatsby-catalog\n\n```\n\nNow go build something, and be sure to share what you make with us on [Twitter](https://twitter.com/strapijs)!","user":{"id":44,"username":"Mark Kaylor","email":"mark.kaylor@strapi.io","provider":"local","confirmed":true,"blocked":false,"role":2,"created_at":"2021-02-26T14:24:15.296Z","updated_at":"2021-02-26T14:24:15.355Z","avatar":{"id":1630,"alt":"Mark Kaylor","lottieAnimation":null,"media":{"id":1911,"name":"26598053.jpeg","alternativeText":"","caption":"","width":400,"height":400,"formats":{"thumbnail":{"ext":".jpeg","url":"/uploads/thumbnail_26598053_a35280711f.jpeg","hash":"thumbnail_26598053_a35280711f","mime":"image/jpeg","name":"thumbnail_26598053.jpeg","path":null,"size":3.88,"width":156,"height":156}},"hash":"26598053_a35280711f","ext":".jpeg","mime":"image/jpeg","size":14.39,"url":"/uploads/26598053_a35280711f.jpeg","previewUrl":null,"provider":"local","provider_metadata":null,"created_at":"2021-02-26T14:23:56.230Z","updated_at":"2021-02-26T14:23:56.248Z"}}},"created_at":"2021-03-26T15:50:54.215Z","updated_at":"2021-03-26T16:08:50.607Z","published_at":"2021-03-26T15:50:56.724Z","settings":{"id":183,"theme":"dark","blank":false,"chatbot":null,"microdata":null,"sponsoredScript":false,"logo":null,"chargebee":null},"seo":{"id":418,"metaTitle":"Announcing the Strapi starter CLI","metaDescription":"Creating fullstack Strapi applications with starters just got easier. Now, with one command, you can have a mono-repo running your starter frontend and Strapi backend in minutes.","preventIndexing":false,"shareImage":null},"image":{"id":1760,"alt":"strapi starters","lottieAnimation":null,"media":{"id":2034,"name":"starterCLI (1) (2).png","alternativeText":"","caption":"","width":1932,"height":1142,"formats":{"large":{"ext":".png","url":"/uploads/large_starter_CLI_1_2_e7fe74ad9e.png","hash":"large_starter_CLI_1_2_e7fe74ad9e","mime":"image/png","name":"large_starterCLI (1) (2).png","path":null,"size":226.06,"width":1000,"height":591},"small":{"ext":".png","url":"/uploads/small_starter_CLI_1_2_e7fe74ad9e.png","hash":"small_starter_CLI_1_2_e7fe74ad9e","mime":"image/png","name":"small_starterCLI (1) (2).png","path":null,"size":60.14,"width":500,"height":296},"medium":{"ext":".png","url":"/uploads/medium_starter_CLI_1_2_e7fe74ad9e.png","hash":"medium_starter_CLI_1_2_e7fe74ad9e","mime":"image/png","name":"medium_starterCLI (1) (2).png","path":null,"size":128.56,"width":750,"height":443},"thumbnail":{"ext":".png","url":"/uploads/thumbnail_starter_CLI_1_2_e7fe74ad9e.png","hash":"thumbnail_starter_CLI_1_2_e7fe74ad9e","mime":"image/png","name":"thumbnail_starterCLI (1) (2).png","path":null,"size":17.81,"width":245,"height":145}},"hash":"starter_CLI_1_2_e7fe74ad9e","ext":".png","mime":"image/png","size":286.12,"url":"/uploads/starter_CLI_1_2_e7fe74ad9e.png","previewUrl":null,"provider":"local","provider_metadata":null,"created_at":"2021-03-26T15:46:12.153Z","updated_at":"2021-03-26T15:46:12.174Z"}},"slices":[{"__component":"slices.related-blog-posts","id":101,"gradientHeader":{"id":119,"gradientPosition":"left","theme":"purple","decorationType":null},"intro":{"id":433,"theme":"purple","label":null,"title":"You may also be interested in","text":null,"button":[],"smallTextWithLink":[]},"blogPosts":[{"id":171,"title":"Strapi Starter Nuxt.js e-commerce","slug":"strapi-starter-nuxt-js-e-commerce","publishedAt":"2020-08-20T10:00:00.000Z","status":"published","content":"If you follow the content of our blog you are aware that Remi and I have embarked on the creation of starters. I created a [blog starter using Gatsby](https://strapi.io/blog/strapi-starter-gatsby-blog-v2), a [Nuxt.js blog starter](https://strapi.io/blog/strapi-starter-nuxt-blog) and Remi a [corporate site starter using Next.js](https://strapi.io/blog/strapi-starter-next-corporate-site) as well as a [portfolio starter using Gridsome](https://strapi.io/blog/strapi-starter-gridsome-portfolio). Well today I am glad to announce that an e-commerce starter using Nuxt.js and Snipcart has been published!\n\n![Gif excited](https://media.giphy.com/media/UlqLDtI8Qc0j6/giphy.gif)\n\nThis starter is a simple e-commerce application on which you can buy dev stickers with an integrated shopping cart made by [Snipcart](https://snipcart.com/). Super easy to integrate, Snipcart offers you the possibility to sell products, downloads, or subscriptions online.\n\n### Features in Strapi\n\n- 1 Component\n- 2 Collection types: Product, Category\n- 27 Created products\n- 6 Created categories\n- Permissions set to `true` for product and category\n- Responsive design using Tailwind css\n- Slug system\n- Publication system (draft & published)\n- Role based access controls\n\n### Features in Nuxt.js\n\n- [@nuxt/strapi](https://strapi.nuxtjs.org/) module\n\n### Payment service\n\nThis starter is using [Snipcart](https://snipcart.com/) which allows you setup a shopping cart on any website.\nThey wrote a [tutorial](https://snipcart.com/blog/strapi-nuxt-ecommerce-tutorial) teaching you how to create this website but selling cupcakes!\n\nPayment will not work on localhost, we are redirecting you to this [tutorial](https://snipcart.com/blog/develop-a-snipcart-powered-website-locally-using-ngrok) if you want to test payment locally.\n\n### Getting started\n\nClone the [repository](https://github.com/strapi/strapi-starter-nuxt-e-commerce)\n\n```\ngit clone https://github.com/strapi/strapi-starter-nuxt-e-commerce.git\ncd strapi-starter-nuxt-e-commerce\n```\n\n**Backend**\n\nInstall dependencies and run your server\n\n```bash\n# Using yarn\nyarn install\nyarn develop\n\n# Using npm\nnpm install\nnpm run develop\n```\n\n**Frontend**\n\n```bash\n# Using yarn\nyarn install\nyarn develop\n\n# Using npm\nnpm install\nnpm run develop\n```\n\nNuxt.js server is running here => [http://localhost:3000](http://localhost:3000)\n\nThank you for taking the time to read this blog post, I'll see you soon with a new starter (with Gridsome again) ;)\nEnjoy this starter!\n\n> **Please note:** Since we initially published this blog post, we released new versions of Strapi and tutorials may be outdated. Sorry for the inconvenience if it's the case. Please help us [by reporting it here](https://github.com/strapi/community-content/issues/new/choose).\n\n---\n\nGet started with Strapi by creating a project using a [starter](https://strapi.io/starters) or trying our [live demo](https://strapi.io/demo). Also, join our [academy]((https://academy.strapi.io)) to become a Strapi expert, and consult our [forum](https://forum.strapi.io) if you have any questions. We will be there to help you.\n<p align=\"center\">\n<a href=\"https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html#_1-install-strapi-and-create-a-new-project\">\n<img src=\"https://assets.strapi.io/uploads/Get_Started_e4e026ce55.svg#small\" />\n</a>\n</p>\nSee you soon!\n","user":6,"created_at":"2020-08-18T10:46:45.240Z","updated_at":"2021-03-09T10:50:50.067Z","published_at":"2020-08-18T10:46:45.240Z"},{"id":241,"title":"Product updates: Strapi v3.5 with the Sentry plugin, SSO authentication, and more","slug":"v3-5-sentry-plugin-sso-authentication","publishedAt":"2021-02-18T11:00:00.000Z","status":"published","content":"This month, we’re excited to announce the release of Strapi 3.5 with the Sentry plugin, the Single-Sign-On Authentication feature, and a bunch of improvements. More details in the post!\n## Announcing a new Sentry plugin\nEveryone loves plugins: they help you connect your favorite tools, extend your software capabilities while keeping its core light and clean. In short, plugins help us build apps in a better, simpler, and more efficient way! \n\nWe at Strapi are not an exception. This year, we're planning to release more plugins and we are starting to bring the plan to life with a highly requested **Sentry plugin** 🎉\n\n[Sentry](https://sentry.io/) allows developers to ensure the quality of their applications. It logs errors and gives you all the context you need to identify the source of the problem. Here's a sneak peek of what a Strapi error may look like in Sentry. \n\n![sentry_screen.png](https://assets.strapi.io/uploads/sentry_screen_fb4cf8774d.png)\n\nThis plugin lets you benefit from all these Sentry features with your Strapi app. Once you install it, the Sentry plugin will:\n- Initialize a Sentry instance when your Strapi app starts\n- Send errors encountered in your application's end API to Sentry\n- Attach useful metadata to Sentry events, to help you with debugging\n- Expose a global Sentry service\n\nInterested? Check out the instructions on how to use the Strapi Sentry plugin in [the article written by Rémi](https://strapi.io/blog/introducing-sentry-plugin).\n\n## Join us for the live Sentry plugin demo\nIn this [online meetup](https://app.livestorm.co/p/b325983d-dc01-4dc7-88da-fece280aa552), Rémi de Juvigny, Software Engineer at Strapi, and Rohit Kataria, Customer Solutions Engineer at Sentry, will walk you through the best practices for an end to end JAMstack Monitoring.\n\nJoin us on February 25th, at 18:00 CET!\n\n<iframe width=\"100%\" height=\"360\" frameborder=\"0\" src=\"https://app.livestorm.co/p/b325983d-dc01-4dc7-88da-fece280aa552/form\" title=\"JAMstack Monitoring with Strapi and Sentry | Strapi\"></iframe>\n\n## SSO authentication in v3.5\nWe’re striving to make Strapi a robust and secure tool for all kinds of projects and users. Version 3.5 introduces an SSO authentication feature for the Strapi admin panel, which lets enterprises connect Strapi to their authentication providers and protocols such as [Active Directory](https://azure.microsoft.com/en-gb/services/active-directory/), [Okta](https://www.okta.com/), [Auth0](https://auth0.com/), [Keycloak](https://www.keycloak.org/), [OAuth](https://oauth.net/) etc. Employees will be able to use the credentials of a third-party app to log in to the admin panel. Please note that version 3.5 includes only SSO authentication and not authorization.\n\n![sso_login2.png](https://assets.strapi.io/uploads/sso_login2_59445867b0.png)\n\n The SSO Authentication feature for the admin panel is available in a [Gold Enterprise Edition plan](https://strapi.io/pricing). There are several reasons why we made this decision: \n- Like any other company, Strapi has to be profitable and we need to find a sustainable business model to continue investing in the product, the ecosystem, and the community. It's also a very common practice in the ecosystem to charge for an enterprise-oriented feature such as SSO.\n- SSO authentication feature does not block anyone from using Strapi for its main purpose - quickly and efficiently building new projects and managing content with ease. We’re including support and some extra features in paid plans to be able to provide Strapi core functionalities for free to millions of users. \n- Based on analysis & user research, SSO authentication is a specific requirement that is relevant to most big enterprises. \n\nWe appreciate every commit and input the community did and continues doing for Strapi, as well as respect all feedback. Our mission is to empower millions of people to share & manage content in tomorrow’s world, and thanks to you we’re getting one step closer to it every day. \n\n## What else in the latest Strapi releases? \n\nWe’re also releasing many smaller improvements and fixes contributed by awesome community members. Other highlights from v3.5 and previous releases include:\n\n - [Add custom logic to react to events ](https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations.html#configurations)\n\nThis improvement lets you set up custom logic to react to particular authentication events. For example, if someone connects to the Strapi application using either Strapi login or 3rd-party service login via SSO, you can set up a reaction to this event - like send a notification or a message to a third-party service. You can also trigger these events if there is an error in the connexion process or if somebody logs in using authorization. \n\nHere are some examples: \n ``` \nevents: {\n       // Emitted when an admin user has successfully logged in to the administration panel\n       onConnectionSuccess(e) {\n         const { user, provider } = e;\n​\n         console.log(`Connection successful for user n°${user.id} using ${provider}`);\n       },\n​\n       // Emitted when an admin user failed to log in to the administration panel\n       onConnectionError(e) {\n         const { error, provider } = e;\n​\n         console.log(`An error has occurred as someone tried to log in using ${provider}`);\n         console.log(error);\n       },\n​\n       // Emitted when a user has been registered thanks to the auto-register feature added by SSO.\n       onSSOAutoRegistration(e) {\n         const { user, provider } = e;\n​\n         console.log(\n           `A new user (${user.id}) has been automatically registered using ${provider}`\n         );\n       },\n\n ```\n- Add the support for Auth0 [#8362](https://github.com/strapi/strapi/pull/8362) and Reddit [#8537](https://github.com/strapi/strapi/pull/8537) to the Users and Permissions plugin\n- Handle duplicate error in the database [#8367](https://github.com/strapi/strapi/pull/8367)\n- Configurable default _limit parameter [#8377](https://github.com/strapi/strapi/pull/8377)\n- Read responsive breakpoints from config instead of being hardcoded [#9002](https://github.com/strapi/strapi/pull/9002)\n \nHave a look at more fixes and enhancements [here](https://github.com/strapi/strapi/releases), perhaps the bug that has been bugging you is fixed now 🤭\n\n## Introducing a new changelog\nWe have a detailed [changelog on Github](https://github.com/strapi/strapi/releases) which includes all the new features, bug fixes, and improvements. However, while it’s quite detailed and thorough, it doesn’t provide a quick overview of what’s new in Strapi.\n\nThat’s why we’re introducing a [new changelog](https://strapi.io/changelog) on the Strapi website, which lets you navigate through the history of major Strapi updates in one scroll. You can also access the materials which explain each new feature and release in more detail. \n\nNow you know how to quickly find out what’s new in Strapi 🤓\n\n![changelog.png](https://assets.strapi.io/uploads/changelog_8a30381dd8.png)\n\n## New to Strapi? Give it a try\nYou can check out our [hosted demo](https://strapi.io/demo) with sample data to see what Strapi is like. We also have a [template library](https://strapi.io/starters) where you can find starters for a blog, corporate website, portfolio, or e-commerce website using different frontend technologies. \n\nYou can also create a new Strapi project on your computer by running the quickstart command: \n ```npx create-strapi-app my-project --quickstart ```\n\nFollow the [migration guides](https://strapi.io/documentation/developer-docs/latest/update-migration-guides/migration-guides.html#instructions) to update your Strapi version and access more features.  \n\n## Get involved\nStrapi is an open-source product and everyone can contribute to it. The Strapi community helps us move forward and we are making Strapi better with our users in mind. \n\nHere’s how you can help us to improve the product:\n- Contribute to the project on [Github](https://github.com/strapi/strapi/blob/master/CONTRIBUTING.md)\n- Share what features you’d love to have in our [public roadmap](https://portal.productboard.com/strapi/1-roadmap/tabs/2-under-consideration)\n- [Create a Strapi template](https://strapi.io/documentation/v3.x/concepts/templates.html#creating-a-template) for a specific use case\n- Share the plugins and providers you built for Strapi in this [repository](https://github.com/strapi/awesome-strapi) \n- Showcase the projects you built with Strapi in [Awesome Strapi](https://strapi.io/showcases)\n\n\n## Thanks to all contributors \nStrapi is a product built together with more than 600 community members. We would love to say thank you to people who contributed to the v3.5 release as well to the previous v3.4 enhancements and bug fixes:\n\n[@rlvk-vk](https://github.com/rlvk-vk), [@gh640](https://github.com/gh640), [@Heziode](https://github.com/Heziode), [@Zeranoe](https://github.com/Zeranoe), [@jozefcipa](https://github.com/jozefcipa), [@pimsomeday](https://github.com/pimsomeday), [@darron1217](https://github.com/darron1217), [@Igloczek](https://github.com/Igloczek), [@croatian91](https://github.com/croatian91), [@pr0gr8mm3r](https://github.com/pr0gr8mm3r), [@NgyAnthony](https://github.com/NgyAnthony), [@leroydev](https://github.com/leroydev), [@shtelzerartem](https://github.com/shtelzerartem), [@iicdii](https://github.com/iicdii), [@shiningnova57](https://github.com/shiningnova57), [@jorrit](https://github.com/jorrit), [@jonmol](https://github.com/jonmol), [@csandven](https://github.com/csandven), [@gh0stsh0t](https://github.com/gh0stsh0t), [@centogram](https://github.com/centogram), [@dappiu](https://github.com/dappiu), [@ertrzyiks](https://github.com/ertrzyiks), [@cwray-tech](https://github.com/cwray-tech), [@meck93](https://github.com/meck93), [@taylor-work](https://github.com/taylor-work), [@bglidwell](https://github.com/bglidwell), [@florianmarkusse](https://github.com/florianmarkusse), [@MattieBelt](https://github.com/MattieBelt), [@blefevre](https://github.com/blefevre), [@PaulWeinsberg](https://github.com/PaulWeinsberg), [@chris-makaio](https://github.com/chris-makaio), [@tunasakar](https://github.com/tunasakar), [ThewBear](https://github.com/ThewBear), [@yusufisl](https://github.com/yusufisl), [@acalvino4](https://github.com/acalvino4), [@avdeyev](https://github.com/avdeyev) and [@ngjoni](https://github.com/ngjoni).\n\nJoin the community! Come chat with us on [Forum](https://forum.strapi.io/) or [Slack](https://slack.strapi.io/), or jump in on [Github](https://github.com/strapi/strapi) directly. We're always happy to meet new members of the Strapi family ❤️\n\n","user":28,"created_at":"2021-02-17T14:00:02.000Z","updated_at":"2021-03-18T11:14:51.418Z","published_at":"2021-02-18T14:43:04.192Z"},{"id":242,"title":"Introducing the official Sentry plugin for Strapi","slug":"introducing-sentry-plugin","publishedAt":"2021-02-18T10:00:00.000Z","status":"published","content":"Back in October, we ran a survey across the Strapi community. Your feedback was clear: plugins are essential to your workflow. They give you the option to expand Strapi's core capabilities as you see fit. They allow you to connect your favorite tools to your CMS, and build better, more ambitious apps with Strapi.\n\nWe also share that vision. Our plan for Strapi is to have an open marketplace showcasing quality plugins. That's why in 2021, we'll be focusing on building an ecosystem of plugins, by working with both partners and you, the community. Today, we're starting that journey with a highly requested plugin: Sentry 🎉\n\n## What's Sentry, and why you should care\n\n[Sentry](https://sentry.io/) allows developers to ensure the quality of their applications. It logs errors and gives you all the context you need to identify the source of the problem. Thanks to Sentry, You can identify the previous events that led to an error, and what commit introduced the bug. And once you can reproduce an issue, fixing it becomes much simpler.\n\nThis plugin lets you benefit from all these Sentry features within your Strapi app. Once you install it, the Sentry plugin will:\n- Initialize a Sentry instance when your Strapi app starts\n- Send errors encountered in your application's end API to Sentry\n- Attach useful metadata to Sentry events, to help you with debugging\n- Expose a global Sentry service\n\n## How to use it\n\nSentry has always been a solution of choice among our users. Our users have been manually setting it up in their apps for years. But from now on, using it in Strapi is as easy as installing the package:\n\n```sh\n# Using Yarn\nyarn add strapi-plugin-sentry\n\n# Or using NPM\nnpm install strapi-plugin-sentry\n```\n\nThen, you'll need to link Strapi to your Sentry project. Find your [data source name (DSN)](https://docs.sentry.io/product/sentry-basics/dsn-explainer/) on your Sentry app. \n\nThen, enter that DSN in your app's `config/plugins.js` file.\n\n```js\nmodule.exports = ({ env }) => ({\n  // ...\n  sentry: {\n    dsn: env('SENTRY_DSN'),\n  },\n  // ...\n});\n```\n\nThat's it, restart your app and you're good to go. All your errors will now be logged on Sentry!\n\nNow, let’s take a look at how we can use this plugin in a real-world application. \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cdlvRTCbHB4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Find the plugin on GitHub\n\nWe want to make Strapi the most customizable and open CMS. That’s why you can find [this plugin’s source code on GitHub](https://github.com/strapi/strapi/tree/master/packages/strapi-plugin-sentry). There, you’ll find all the documentation you need to adapt or extend the plugin to suit your needs.\n\nYou can give us your feedback using GitHub issues, or by reaching out [on Twitter](https://twitter.com/strapijs). And your contributions are always welcome, so don’t hesitate to submit a pull request. We’ll be happy to review it!\n## Join the live plugin demo\n\nTo find out more about this plugin, you can sign up for our next webinar: [JAMstack Monitoring with Strapi and Sentry](https://app.livestorm.co/strapi/jamstack-monitoring-with-strapi-and-sentry?type=detailed). It will be on the 25th of February and co-hosted by Rohit Kataria, customer solutions engineer at Sentry. Together, we will walk you through the best practices for an end to end JAMstack Monitoring.\n<iframe width=\"100%\" height=\"360\" frameborder=\"0\" src=\"https://app.livestorm.co/p/b325983d-dc01-4dc7-88da-fece280aa552/form\" title=\"JAMstack Monitoring with Strapi and Sentry | Strapi\"></iframe>\n\nIn the meantime, happy debugging!\n\n","user":20,"created_at":"2021-02-17T17:54:47.610Z","updated_at":"2021-02-18T11:10:08.401Z","published_at":"2021-02-18T10:47:11.949Z"}]},{"__component":"slices.newsletter-banner","id":94,"newsletter":null}],"postCategories":[{"id":4,"name":"Product","created_at":"2020-06-09T08:28:09.726Z","updated_at":"2020-06-09T08:28:09.726Z"},{"id":8,"name":"Announcement ","created_at":"2020-09-04T12:47:17.459Z","updated_at":"2020-09-04T12:47:17.459Z"}]},{"id":252,"title":"Learning Strapi Authentication Flows with the Facebook Provider","slug":"learning-strapi-authentication-flows-facebook-provider","publishedAt":"2021-03-23T11:00:00.000Z","status":"published","content":"> This article is a guest post by [Anumadu Moses](https://twitter.com/alloyking_1). He wrote this blog post through the Write for the Community program. If you are passionate about everything jamstack, open-source or javascript and want to share, [join the writer's guild](/write-for-the-community)!\n\n## Facebook Login with Strapi\n\n## Introduction\n\nStrapi is a headless CMS built with Node.js and React.js. It has grown in popularity and acceptance recently because of its unique plugin design pattern and flat learning curve (easy to learn). Strapi API endpoints can be consumed with any recent JavaScript front-end frameworks (Nuxt.js, Vue.js, React.js, Next.js, e.t.c) or even core HTML, CSS, and Vanilla JavaScript or jQuery. Strapi is one of the best options when talking Jamstack. It is shipped with rich APIs to suit most of your Jamstack needs.\n\nBut enough talking about how great Strapi is. Since you are reading this article, I am sure you already know a thing or two about Strapi. This tutorial would walk you through the implementation process of Facebook as an authentication provider in Strapi. The process is not a complex one, so let's get right into it.\n\n## Strapi Auth Providers\nStrapi is shipped with several providers for authentication, including Facebook, which is our main focus in this tutorial. Other providers include Google, GitHub, Instagram, Email, e.t.c. \n\nTo implement Facebook as an authentication provider in Strapi, we need a life address to redirect to. For this, we would be using Ngrok to expose our local development server to the internet in the easiest way possible. There are other ways to do this. Deploying your Strapi app to a server like Heroku, AWS e.t.c can serve as alternatives too. But for simplicity's purpose, let's work with Ngrok.\n\n## Create a Strapi Project:\nLet's get started by creating a new Strapi project using the command below:\n\n\n    yarn create strapi-app auth-provider-strapi --quickstart\n\nor using npm\n\n\n    npx create-strapi-app auth-provider-strap --quickstart\n\nAfter installation, start your Strapi development server using the command below:\n\n\n    yarn develop\n\nyour screen should look like the below. Go ahead and fill out the form, finish the registration process and access the Strapi application dashboard.\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613080294787_createAdminCapture.PNG)\n\n\n## Ngrok Configuration\n\nNgrok Is a very light-weighted piece of cross-platform software that enables developers to access a project in their local development environment over the internet. With Ngrok, you do not need to deploy a project to a life server. You would be able to share your local projects with anyone over the internet by tunneling the development URL to a Ngrok URL which is life over the internet. You can check the documentation [here](https://ngrok.com/docs).\n\nTo install [Ngrok](https://ngrok.com/) and get started, head over to its website and create an account if you don’t have one already. The image below is the Ngroks dashboard. Click on the download button to download Ngrok for your operating system and install it.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613080924028_ngrokCapture.PNG)\n\n\nAfter installing Ngrok, you need to add your auth token to complete the installation. From a terminal, head over to the directory where Ngrok is, type the following to add your auth token \n\n\n    ./ngrok authtoken 4xhxxxxxxxxxxxxxxo_5ctoUpZxxxxxxxxeSUZ\n\nThis is an easy process. Take a closer look at the screenshot below, I navigated to my download folder which happened to be the directory where why Ngrok sits in. \n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613081320823_ngrokauthtokenCapture.PNG)\n\n\nAfter adding the auth token, We can now fire up Strapi locally and tunnel through Ngrok to the internet using the command below.\n \n\n    ./ngrok http 1337\n\nNote that the 1337 as used above is my local environment port. This can be anything depending on what port your local project is running on. \n\nThis is what your screen should look like.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613081923718_ngrokterninalCapture.PNG)\n\n\n\n## Create A Facebook App\n\nWe need a Facebook developer app to complete our authentication process. Let's create one. Head over to [F](https://developers.facebook.com)[acebook developer](https://developers.facebook.com) website using the link. \n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613129301598_facebookAppCapture.PNG)\n\n\nClick on **My Apps** link above and create your app. The process is straight forward and basically just requires providing names and redirection links.\n\nClick on the create new app button at the top right corner of the page. This would popup a number of options on the type of Facebook application you want to create. \n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613142054083_optionsCapture.PNG)\n\n\nSelect More options (this is the last option on the list), click on continue. It will take redirect to the screen below:\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1616159741196_facebookappMoreOptionsCapture.PNG)\n\n\nSelect Something Else and click on the continue button to complete our app creation. With that done, It should take you to a screen that looks like the one below. The next thing we need to do is to add a product. Facebook offers more than one product to developers as you can see from the screen below:\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1616160252590_addProductCapture.PNG)\n\n\nWe want to integrate Facebook Login into our Strapi application. We will add a Facebook login product to our app. To do this, clicking on the Facebook login **setup** button from the screen above. This would create it. \n\n You can head over to the dashboard that looks like the image below.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613142529716_dashboardCapture.PNG)\n\n\nTo finish the process, click on the **settings/basic** and complete the form.  Fill out the form.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613142892466_basicSetingCapture.PNG)\n\n\nNotice that the app domain provided is our Ngrok domain. The **App ID** and **APP secret** will come in handy later so keep that in mind. For the final phase, click on the **Facebook Login** product link we create earlier, from the drop down click on  settings option. Add the redirect URL. This should also point to our Ngrok URL. \n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1616161135953_addProductSettingCapture.PNG)\n\n\n\n## Strapi Facebook Auth Provider\n\n To round it all up, in your Strapi application, click on **Settings**→**Provider**→**Facebook**. \n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613143533127_providersCapture.PNG)\n\n\nClick on **Facebook** to edit and add all the necessary details.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1616161490895_InkednuxtCallbackCapture_LI.jpg)\n\n\n\n\n**Client ID** above is the **App ID** from Facebook. The **Client Secret** is the **App Secret** from Facebook. Once again we used our Ngrok URL for our redirection URL. We have successfully finished our setups. Now let's test to see that everything works before we proceed. In your browser, type the following URL to test:\n `https://web.archive.org/web/20210327095128/https://localhost:1337/connect/facebook` \n This URL will redirect you to the Facebook page where you will be required to enter your Facebook login details to continue.\n\nThis will redirect you to Facebook and prompt you to log in and grant all necessary permissions to continue. \n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613145534288_facebookLanderCapture.PNG)\n\n\nOnce the right login credentials are provided, the user would be redirected back to our ngrok provided URL and the user details saved in our Strapi database. You can find the user details registered in the **Collection**→**Users.**\n\nReturn user data.\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613145816586_returnValueCapture.PNG)\n\n\nUser data stored in Strapi backend.\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613145782742_saveduserCapture.PNG)\n\n\n\n## Single-page Application\n\nIn a real-world application, you would most likely have a front-end application that will communicate with Strapi API. This can be built with any of the many frontend solutions/frameworks (Nuxt.js, vue.js, React.js, Next.js, e.t.c.) In situations like this, you will need your Strapi application to redirect back to the front end of your application after authentication using Facebook. \n\nLet us assume that your front end is ready and deployed successfully somewhere with a working URL. To complete the authentication process, we need to set our redirection URL to the URL of our front-end application. It's that simple. Instead of redirecting to our Ngrok temporary URL, we will redirect to the domain name of our front-end app.\n\n> Note: Your Ngrok URL would change each time you restart it. Remember to update the redirection URL in your Strapi dashboard with the new URL each time it changes while testing. \n\n\n## Create a Nuxt.js Application \n\nTo finish up this tutorial, let us create a Nuxt single page application to interact with our Strapi back-end. Use the following command:\n\nusing yarn:\n\n    yarn create nuxt-app <project-name>\n\nor \nusing npm:\n\n    npm init nuxt-app <project-name>\n\nThe project name above would be substituted with the actual name of our front-end application. when installation is done, start your Nuxt application using the command below:\n\n\n    yarn dev\n\nor \n\n    npm run dev\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613746602623_nuxtCapture.PNG)\n\n## Login Form\n\nTo log in, we need an HTML form or some sort of UI for the user experience. Let us go ahead and create one. \n\nWe would be needing https://fontawesome.com to add some nice Icons to our login button. Nuxt.js has a module for adding Fontawesome to Nuxt projects. Let us install it using the following command:\n\n\n    yarn add @nuxtjs/fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-brands-svg-icons -D @fortawesome/fontawesome-svg-core\n\nwith the commands above, we can use both the paid and the free version of Fontawesome. We need to add Fontawesome to our Nuxt.js config file found at the root of our folder. Add the following code:\n\n\n      buildModules: [\n        '@nuxtjs/fontawesome',\n      ],\n    \n    fontawesome: {\n        component:'fa',\n        icons:{\n          solid: true,\n          brands: true\n        }\n      }\n\nWith this, our configuration is complete. Let us modify the landing page above to display our authentication form. Add the following lines of code to Pages→index.vue:\n\n\n    <template>\n      <div class=\"container\">\n        <div>\n          <!-- <Logo /> -->\n          <h1 class=\"title\">Strapi-Auth</h1>\n          <div class=\"links\">\n            <a\n              href=\"#\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"button--grey\"\n            >\n              <fa :icon=\"['fab', 'facebook']\" />\n              Facebook\n            </a>\n          </div>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {};\n    </script>\n    <style>\n    .container {\n      margin: 0 auto;\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    }\n    .title {\n      font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont,\n        \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n      display: block;\n      font-weight: 300;\n      font-size: 100px;\n      color: #35495e;\n      letter-spacing: 1px;\n    }\n    .subtitle {\n      font-weight: 300;\n      font-size: 42px;\n      color: #526488;\n      word-spacing: 5px;\n      padding-bottom: 15px;\n    }\n    .links {\n      padding-top: 15px;\n    }\n    </style>\n    \n\nBy now,  you should have something similar to mine:\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613755331830_nextCapture.PNG)\n\n\nWe will use ngrok to make our Nuxt application available over the internet as we did above. The process is simple. Follow what we did above and it will work. The image below is the tunneling of my Nuxt application using Ngrok.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613994687398_nuxtNgrokCapture.PNG)\n\n\nLet us add our Facebook login URL to the Facebook login button. This will redirect the user to the Facebook login page and prompt them to log in.\n\nOpen Pages→**index.vue**. Edit the code for the button like so:\n\n\n    <div class=\"container\">\n        <div>\n          <!-- <Logo /> -->\n          <h1 class=\"title\">Strapi-Auth</h1>\n          <div class=\"links\">\n            <a\n              href=\"http://localhost:1337/connect/facebook\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"button--grey\"\n            >\n              <fa :icon=\"['fab', 'facebook']\" />\n              Facebook\n            </a>\n          </div>\n        </div>\n      </div>\n\nIn the code above, we add the Strapi Facebook login route. When the button is clicked, it should redirect to the Facebook authentication page where users would log in with their Facebook login details.\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613987451935_facebookLanderCapture.PNG)\n\n## Redirection\n\nLet us handle redirection after a successful registration. In our Strapi dashboard, we need to replace the redirect URL with the URL of our Nuxt.js frontend app. We can generate a Ngrok URL for our Nuxt app and use it to replace the redirection URL in our Strapi dashboard and that’s it. Remember that we are using Ngrok here because we do not have a Host plan and we are still working locally. If you have your application Hosted already then you have to replace the Ngrok address with your domain name. It's easy.\n\nBut first, let us create a home page to our Nuxt app. Our Nuxt application would redirect here:\nIn our Nuxt application head on to **Pages** directory. Create a new page called **home.vue.** \nAdd to following code snippet to flesh out the page:\n\n\n    <template>\n      <div>\n        <div class=\"container\">\n          <h1 class=\"title\">Home!!</h1>\n        </div>\n        <div class=\"text\">\n          <h3>You got here because your authentication was successful</h3>\n        </div>\n      </div>\n    </template>\n    <style>\n    .container {\n      margin: 0 auto;\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    }\n    .text {\n      text-align: center;\n      margin-top: -20%;\n      color: #a5a5a5;\n    }\n    .title {\n      font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont,\n        \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n      display: block;\n      font-weight: 300;\n      font-size: 100px;\n      color: #35495e;\n      letter-spacing: 1px;\n    }\n    </style>\n\nIt's just a simple HTML page with some CSS. Our Application should redirect here after successful authentication.\n\n\n![](https://paper-attachments.dropbox.com/s_726454A18651000165F5AD35825738290F339AEF0D209DB0EF2F4A027FFD06A2_1613991290755_nuxtHomeCapture.PNG)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YntuWF9MuWA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nWith this, we are good to go. Congrats you’ve made it this far.\n\n## Conclusion\n\nBy now you should be able to:\n\n- Add Facebook authentication to your Strapi application \n- Install and configure ngrok to tunnel your Strapi local URL to become accessible over the internet.\n- Create a Facebook developer application \n- Using Strapi Facebook authentication with Nuxt.js single page application.\n\nIts time to go build something amazing. Cheers. Find link to the [Strapi](https://github.com/alloyking1/strapi_auth_provider/tree/master) app and [Nux](https://github.com/alloyking1/strapi_nuxt_frontend/tree/master)[t](https://github.com/alloyking1/strapi_nuxt_frontend/tree/master)[.js](https://github.com/alloyking1/strapi_nuxt_frontend/tree/master) app on GitHub respectively. \n\n","user":{"id":47,"username":"Anumadu Moses","email":"alloyking1@gmail.com","provider":"local","confirmed":false,"blocked":false,"role":1,"created_at":"2021-03-15T14:36:57.053Z","updated_at":"2021-03-15T14:36:57.117Z","avatar":{"id":1658,"alt":"Anumadu Moses","lottieAnimation":null,"media":{"id":1983,"name":"22731000.jpeg","alternativeText":"","caption":"","width":400,"height":400,"formats":{"thumbnail":{"ext":".jpeg","url":"/uploads/thumbnail_22731000_59503fccb4.jpeg","hash":"thumbnail_22731000_59503fccb4","mime":"image/jpeg","name":"thumbnail_22731000.jpeg","path":null,"size":4.91,"width":156,"height":156}},"hash":"22731000_59503fccb4","ext":".jpeg","mime":"image/jpeg","size":17.29,"url":"/uploads/22731000_59503fccb4.jpeg","previewUrl":null,"provider":"local","provider_metadata":null,"created_at":"2021-03-15T14:36:21.855Z","updated_at":"2021-03-15T14:36:21.870Z"}}},"created_at":"2021-03-23T11:07:21.123Z","updated_at":"2021-03-23T12:50:45.426Z","published_at":"2021-03-23T12:17:25.962Z","settings":{"id":180,"theme":"light","blank":false,"chatbot":null,"microdata":null,"sponsoredScript":false,"logo":null,"chargebee":null},"seo":{"id":404,"metaTitle":"Learning Strapi Authentication Flows with the Facebook Provider","metaDescription":"In this tutorial you will learn the implementation process of Facebook as an authentication provider in Strapi using Ngrok.","preventIndexing":false,"shareImage":{"id":1688,"alt":" Strapi Authentication Flows with Facebook","lottieAnimation":null,"media":{"id":2019,"name":"Anumadu Moses.jpg","alternativeText":"","caption":"","width":2048,"height":1028,"formats":{"large":{"ext":".jpg","url":"/uploads/large_Anumadu_Moses_65f7578b7e.jpg","hash":"large_Anumadu_Moses_65f7578b7e","mime":"image/jpeg","name":"large_Anumadu Moses.jpg","path":null,"size":39.78,"width":1000,"height":502},"small":{"ext":".jpg","url":"/uploads/small_Anumadu_Moses_65f7578b7e.jpg","hash":"small_Anumadu_Moses_65f7578b7e","mime":"image/jpeg","name":"small_Anumadu Moses.jpg","path":null,"size":14.56,"width":500,"height":251},"medium":{"ext":".jpg","url":"/uploads/medium_Anumadu_Moses_65f7578b7e.jpg","hash":"medium_Anumadu_Moses_65f7578b7e","mime":"image/jpeg","name":"medium_Anumadu Moses.jpg","path":null,"size":26.88,"width":750,"height":376},"thumbnail":{"ext":".jpg","url":"/uploads/thumbnail_Anumadu_Moses_65f7578b7e.jpg","hash":"thumbnail_Anumadu_Moses_65f7578b7e","mime":"image/jpeg","name":"thumbnail_Anumadu Moses.jpg","path":null,"size":5.43,"width":245,"height":123}},"hash":"Anumadu_Moses_65f7578b7e","ext":".jpg","mime":"image/jpeg","size":102.66,"url":"/uploads/Anumadu_Moses_65f7578b7e.jpg","previewUrl":null,"provider":"local","provider_metadata":null,"created_at":"2021-03-23T11:16:23.021Z","updated_at":"2021-03-23T11:16:23.042Z"}}},"image":{"id":1689,"alt":" Strapi Authentication Flows with Facebook","lottieAnimation":null,"media":{"id":2020,"name":"Strapi Custom Plugin-3.jpg","alternativeText":"","caption":"","width":966,"height":571,"formats":{"small":{"ext":".jpg","url":"/uploads/small_Strapi_Custom_Plugin_3_a41d3c19c8.jpg","hash":"small_Strapi_Custom_Plugin_3_a41d3c19c8","mime":"image/jpeg","name":"small_Strapi Custom Plugin-3.jpg","path":null,"size":13.39,"width":500,"height":296},"medium":{"ext":".jpg","url":"/uploads/medium_Strapi_Custom_Plugin_3_a41d3c19c8.jpg","hash":"medium_Strapi_Custom_Plugin_3_a41d3c19c8","mime":"image/jpeg","name":"medium_Strapi Custom Plugin-3.jpg","path":null,"size":23.94,"width":750,"height":443},"thumbnail":{"ext":".jpg","url":"/uploads/thumbnail_Strapi_Custom_Plugin_3_a41d3c19c8.jpg","hash":"thumbnail_Strapi_Custom_Plugin_3_a41d3c19c8","mime":"image/jpeg","name":"thumbnail_Strapi Custom Plugin-3.jpg","path":null,"size":5.14,"width":245,"height":145}},"hash":"Strapi_Custom_Plugin_3_a41d3c19c8","ext":".jpg","mime":"image/jpeg","size":34.36,"url":"/uploads/Strapi_Custom_Plugin_3_a41d3c19c8.jpg","previewUrl":null,"provider":"local","provider_metadata":null,"created_at":"2021-03-23T11:26:32.076Z","updated_at":"2021-03-23T11:26:32.098Z"}},"slices":[{"__component":"slices.related-blog-posts","id":100,"gradientHeader":{"id":113,"gradientPosition":"right","theme":"purple","decorationType":null},"intro":{"id":406,"theme":"purple","label":null,"title":"You might also be interested in...","text":null,"button":[],"smallTextWithLink":[]},"blogPosts":[{"id":86,"title":"Protected routes and Authentication with React and Node.js","slug":"protected-routes-and-authentication-with-react-and-node-js","publishedAt":"2018-02-21T08:51:00.000Z","status":"published","content":"Well, last weekend I wanted to dig into some good old [React](https://reactjs.org/) without fancy stuffs like [Redux-Saga](https://github.com/redux-saga/redux-saga).\n\nSo I started a side project to create a tiny boilerplate with nothing more than **[Create React App](https://github.com/facebook/create-react-app) to implement the authentication flow with [Strapi](https://strapi.io)**, a Node.js framework with an extensible admin panel and built-in features (authentication, upload, permissions...).\n\n\n![React Nodejs](/uploads/react-plus-nodejs-small.png_04e540dd4f.png)\n\nIn this tutorial we'll quickly implement the **basic authentication flow using [JSON Web Tokens](https://jwt.io/)** that a [Strapi](https://strapi.io) API provides but also, (which might be more interesting) how to use **authentication providers (Facebook, GitHub, Google...) with Strapi** to authenticate your users.\n\n![Strapi authentication](/uploads/2018-02-20-19.41.11.gif_16be9954f6.gif)\n\n*Note: the source code of this article is [available on GitHub](https://github.com/strapi/strapi-examples/tree/master/good-old-react-authentication-flow).*\n\n## Creating the project\n\nBefore all, you need to create a Strapi API:\n\n```bash\n$ npm install strapi@alpha -g\n$ strapi new my-app\n$ cd my-app && strapi start\n```\n\nAnd also, your front-end application:\n\n```bash\n$ npm install create-react-app -g\n$ create-react-app good-old-react-authentication-flow\n```\n\n**You need to [register your first user](http://localhost:1337/admin) and then you're ready to go!**\n\n## Front-end App Architecture\n\nI'm a huge fan of the [React Boilerplate](https://github.com/react-boilerplate/react-boilerplate) architecture so I created something similar to organize my code:\n\n```\n/src\n└─── containers // React components associated with a Route\n|    └─── App // The entry point of the application\n|    └─── AuthPage // Component handling all the auth views\n|    └─── ConnectPage // Handles the auth with a custom provider\n|    └─── HomePage // Can be accessed only if the user is logged in\n|    └─── NotFoundPage // 404 Component\n|    └─── PrivateRoute // HoC\n|\n└─── components // Dummy components\n|\n└─── utils\n     └─── auth\n     └─── request // Request helper using fetch\n```\n\n### Router Setup and PrivateRoute\n\nTo implement the authentication views, we first need to create a **HoC**: *Higher Order Component* that will check if a user can access a specific URL.\nTo do so, we just need to follow [the official documentation](https://reacttraining.com/react-router/web/example/auth-workflow) and modify the `fakeAuth` example and use our `auth.js` helper:\n\n```js\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\n\n// Utils\nimport auth from '../../utils/auth';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    auth.getToken() !== null ? (\n      <Component {...props} />\n    ) : (\n      <Redirect to={{\n        pathname: 'auth/login',\n        state: { from: props.location }\n        }}\n      />\n    ):\n  )} />\n);\n\nexport default PrivateRoute;\n```\n\n**Let's create the routing:**\n\n```js\n\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n// Components\nimport AuthPage from '../../containers/AuthPage';\nimport ConnectPage from '../../containers/ConnectPage';\nimport HomePage from '../../containers/HomePage';\nimport NotFoundPage from '../../containers/NotFoundPage';\n\n// This component ios HoC that prevents the user from accessing a route if he's not logged in\nimport PrivateRoute from '../../containers/PrivateRoute';\n\n// Design\nimport './styles.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            {/* A user can't go to the HomePage if is not authenticated */}\n            <PrivateRoute path=\"/\" component={HomePage} exact />\n            <Route path=\"/auth/:authType/:id?\" component={AuthPage} />\n            <Route exact path=\"/connect/:provider\" component={ConnectPage} />\n            <Route path=\"\" component={NotFoundPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n```\n\n### Creating the Authentication Views\n\nNow that all our routes are implemented we need the create our views.\nThe way we declared our routes allows us to have one component that is responsible for creating the correct form according to the `location`.\n\nFirst of all, let's create a `forms.json` file that will handle the creation of the form on each auth view:\n\n- forgot-password\n- login\n- register\n- reset-password\n\nThis structure of the `JSON` will be like the following (*you can see a `customBootstrapClass` key that is needed in the `Input` component*):\n\n```json\n{\n  \"views\": {    \n    \"login\": [\n      {\n        \"customBootstrapClass\": \"col-md-12\",\n        \"label\": \"Username\",\n        \"name\": \"identifier\",\n        \"type\": \"text\",\n        \"placeholder\": \"johndoe@gmail.com\"\n      },\n      {\n        \"customBootstrapClass\": \"col-md-12\",\n        \"label\": \"Password\",\n        \"name\": \"password\",\n        \"type\": \"password\"\n      },\n      {\n        \"customBootstrapClass\": \"col-md-6\",\n        \"label\": \"Remember me\",\n        \"name\": \"rememberMe\",\n        \"type\": \"checkbox\"\n      }\n    ]\n  },\n  \"data\": {\n    \"login\": {\n      \"identifier\": \"\",\n      \"password\": \"\",\n      \"rememberMe\": false\n    }\n  }\n}\n```\n\n**Setting the state on location change**\n\nTo set the form when the user navigates from `auth/login` to `auth/register` we need to use the following lifecycles:\n\n```js\ncomponentDidMount() {\n  // Generate the form with a function to avoid code duplication\n  // in other lifecycles\n  this.generateForm(this.props);\n}\n```\n\n```js\ncomponentWillReceiveProps(nextProps) {\n  // Since we use the same container for all the auth views we need to update\n  // the UI on location change\n  if (nextProps.location.match.params.authType !== this.props.location.match.params.authType) {\n    this.generateForm(nextProps);\n  }\n}\n```\nThe `generateForm` method is in charge of getting the data from the `forms.json` file above.\n\n**Creating the view**\n\nTo create the form we just need to map over the data retrieve in the `forms.json` file.\n\n```js\nhandleChange = ({ target }) => this.setState({ value: { ...this.state.value, [target.name]: target.value } });\n\nrender() {\n  const inputs = get(forms, ['views', this.props.match.params.authType, []);\n\n  return (\n    <div>\n      <form onSubmit={this.handleSubmit}>\n        {inputs.map((input, key) => (\n          <Input\n            autoFocus={key === 0}\n            key={input.name}\n            name={input.name}\n            onChange={this.handleChange}\n            type={input.type}\n            value={get(this.state.value, [input.name], '')}\n          />\n        ))}\n        <Button type=\"submit\" />\n      </form>\n    </div>\n  );\n}\n```\n\n![Strapi login view](/uploads/Screen-Shot-2018-02-21-at-10.43.01.png_93f3398459.png)\n\nWell, at this point all the views needed for authenticating your users should be created! We just need to make the API call to access the app.\n\n**Posting data to the API**\n\nTo make the API call, I have a `request` helper ([that you can get in the demo app](https://github.com/strapi/strapi-examples/tree/add-providers/good-old-react-authentication-flow/src/utils)) so we just need to use it in our `handleSubmit` function:\n\n```js\nhandleSubmit = (e) => {\n  e.preventDefault();\n  const body = this.state.value;\n  const requestURL = 'https://web.archive.org/web/20210327095128/http://localhost:1337/auth/local';\n\n  request(requestURL, { method: 'POST', body: this.state.value})\n    .then((response) => {\n      auth.setToken(response.jwt, body.rememberMe);\n      auth.setUserInfo(response.user, body.rememberMe);\n      this.redirectUser();\n    }).catch((err) => {\n      console.log(err);\n    });\n}\n\nredirectUser = () => {\n  this.props.history.push('/');\n}\n```\n\nNothing fancy here, once we get the response from the API we just store the needed informations in either the `localStorage` or the `sessionStorage` and we redirect the user to the HomePage.\n\n**Well we just achieved the most difficult part because using a custom provider like Facebook is easy as pie!**\n\n## Using a Authentication Provider\n\nWhatever you choose Facebook, GitHub or even Google, using a provider for authenticating your users with Strapi is ***again*** really easy 🙈. In this example, I will show you how to use it with Facebook.\n\nSince Strapi doesn't provide (**yet**) a Javascript SDK to bridge the gap between the Strapi API and the Facebook API.\n\n**Here is the flow**:\n\n* The user clicks on login with Facebook\n* It redirects him to another page so he can authorize the app\n* Once authorized, Facebook redirects the user to your app with a code in the URL\n* Send this code to Strapi\n\nAt this point, we need to implement only one lifecycle `componentDidMount` which makes the API call and redirects the user depending on the response in the `ConnectPage` container:\n\n```js\ncomponentDidMount() {\n  const { match: {params: { provider }}, location: { search } } = this.props;\n  const requestURL = `https://web.archive.org/web/20210327095128/http://localhost:1337/auth/${provider}/callback${search}`;\n \n request(requestURL, { method: 'GET' })\n   .then((response) => {\n      auth.setToken(response.jwt, true);\n      auth.setUserInfo(response.user, true);\n      this.redirectUser('/');\n   }).catch(err => {\n      console.log(err.response.payload)\n      this.redirectUser('/auth/login');\n   });\n}\n\nredirectUser = (path) => {\n  this.props.history.push(path);\n}\n```\n\n**Displaying the Providers in the AuthPage**\n\nTo do so, we need a `SocialLink`component like the following:\n\n```js\n/**\n*\n* SocialLink\n*\n*/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../components/Button'\n\nfunction SocialLink({ provider }) {\n  return (\n    <a href={`https://web.archive.org/web/20210327095128/http://localhost:1337/connect/${provider}`} className=\"link\">\n      <Button type=\"button\" social={provider}>\n        <i className={`fab fa-${provider}`} />\n        {provider}\n      </Button>\n    </a>\n  );\n}\n\nSocialLink.propTypes = {\n  provider: PropTypes.string.isRequired,\n};\n\nexport default SocialLink;\n```\n\nAnd we need to add it to the `AuthPage`:\n\n```js\nrender() {\n  const providers = ['facebook', 'github', 'google', 'twitter']; // To remove a provider from the list just delete it from this array...\n  \n  return (\n     <div>\n       {providers.map(provider => <SocialLink provider={provider} key={provider} />)}\n       {/* Some other code */}\n     </div>\n  );\n}\n```\n\n![Login page](/uploads/Screen-Shot-2018-02-21-at-10.42.51.png_675dfeb1a8.png)\n\n**Well that's pretty much what we need to do for the front-end application now just need to setup Strapi to enable custom providers 😎**\n\n### Setting up Facebook so we can register our users\n\nGo to [Facebook developers](https://developers.facebook.com/) and create an app called `test`.\n\n- In the product section add `Facebook login`\n- Select `Web`\n- Set `https://web.archive.org/web/20210327095128/http://localhost:3000` as your website URL\n\n![Facebook setup](/uploads/Screen-Shot-2018-02-20-at-18.08.35.png_399d087ab9.png)\n\n- Copy for App Id and App Secret from the Dashboard page of your app\n\n![Facebook setup](/uploads/Screen-Shot-2018-02-20-at-18.10.39.png_789975eb39.png)\n\n- In the `Facebook login` > `Advanced settings` add: `https://web.archive.org/web/20210327095128/http://localhost:1337/connect/facebook/callback` in the `Valid OAuth redirect URIs` field.\n\n![Facebook setup](/uploads/fb_settings.png_5b00faf070.png)\n\n### Setting up Strapi\n\nNow that you have created your app on Facebook you need to configure the Facebook provider in your project.\n\nGo to [Providers tab of the Users & Permissions section](http://localhost:1337/admin/plugins/users-permissions/providers) and fill the form like the following:\n\n![Admin FB setup](/uploads/Screen-Shot-2018-02-20-at-18.54.48.png_bedd2728e6.png)\n\n*Don't forget to save your modifications.*\n\n## Conclusion\n\n> With the **hope that this small tutorial helped you authenticating your users** with [React](https://reactjs.org/) and [Strapi](https://strapi.io).\n\nIn my opinion, there is not much to do and it is very easy! Anyway [here you can find the boilerplate](https://github.com/strapi/strapi-examples/tree/add-providers/good-old-react-authentication-flow) which was created with Create React App from this weekend.\n\nAlso another full example using the [React Boilerplate](https://github.com/react-boilerplate/react-boilerplate) available [here](https://github.com/strapi/strapi-examples/tree/master/login-react) which also has the authentication flow already implemented. This second example uses React, Redux-Saga and is also the boilerplate we used to build the admin on [Strapi](https://strapi.io).\n\nFeel free to share it and give you your feedback in the comments!\n\n","user":5,"created_at":"2020-04-28T19:12:52.198Z","updated_at":"2020-09-09T15:16:27.471Z","published_at":"2020-04-28T19:12:52.198Z"},{"id":175,"title":"Strapi Authentication in Nuxt.js","slug":"strapi-authentication-in-nuxt-js","publishedAt":"2020-08-25T14:00:00.000Z","status":"published","content":"This is a step-by-step guide on how to implement Strapi-based authentication in a Nuxt.js app.\n\nHere's a preview of what we're setting to achieve:\n\n![nuxt-strapi-auth-preview](https://api-prod.strapi.io/uploads/nuxt-strapi-auth-preview_ff679f32e7.gif)\n\nIn essence, authentication is the process through which a website or app verifies the identity of its users.\n\nAs the gatekeeper to an app, authentication needs to be secure and reliable. After all, it deals with user information, potentially the most critical data in an app.\n\nImplementing a secure authentication mechanism from scratch is _hard_ and can quickly become cumbersome. Where do you save the user data? Should you roll out a database and model the user content type? What about registration, login, and password reset?\n\nBut it doesn't end there. How to securely deal with passwords? Hashing and all that fun stuff 😵.\n\nThat's a lot to think about when you just want to dive into the core functionality of the app you're developing!\n\nYou could build your own authentication mechanism, but do you really _need_ or _want_ to? I'd say, better to rely on something that's already built and thoroughly tested before.\n\n[Strapi](https://strapi.io/) is an awesome open-source Node.js headless CMS, backed by a large, [active community](https://strapi.io/community).\n\nOne of the cool things about Strapi is that it provides authentication right out of the box, with built-in admin and user content types and API endpoints to perform the main authentication operations.\n\nOn the frontend, we'll be using [Nuxt.js](https://nuxtjs.org/) and relying on Nuxt's [Auth Module](https://auth.nuxtjs.org/), which is the official zero-boilerplate authentication module for Nuxt.js.\n\nSo, in this article, we'll be building two projects:\n\n- Backend: Strapi app to store and manage users\n- Frontend: Nuxt app that will use Strapi's API for authentication purposes\n\nThe source code for both projects can be found on GitHub:\n\n- [strapi-users](https://github.com/ramigs/strapi-users)\n- [nuxt-auth](https://github.com/ramigs/nuxt-auth)\n\nStrapi's authentication scheme is based on email/username and password credentials, along with JWT tokens. Upon successful authentication, the response will return a JWT authentication token that will be added to subsequent API requests. The Auth Module will conveniently help us manage this workflow.\n\nWe will also be implementing some basic authorization features, such as restricting certain pages to only logged in/out users.\n\nThis guide builds on top of Chimezie Enyinnaya's [awesome work](https://www.digitalocean.com/community/tutorials/implementing-authentication-in-nuxtjs-app), adapting it to Strapi's specific use case, and adding also the following features:\n\n- Email confirmation for registration\n- Password reset\n- Token expiration strategy\n\nI won't go into a detailed explanation at every step. Instead, I'll focus on Strapi and the new functionality. For everything else, I recommend you refer to [Chimezie's tutorial](https://www.digitalocean.com/community/tutorials/implementing-authentication-in-nuxtjs-app) and the [Auth Module documentation](https://auth.nuxtjs.org/#getting-started).\n\n## Pre-requisites\n\nTo follow this tutorial, make sure you have Node.js installed:\n\n- Node.js 12.x\n- npm 6.x\n\nAlthough not required, a basic knowledge of Strapi, Nuxt.js, and JWT fundamentals is recommended.\n\n> Disclaimer: this tutorial was written based on Strapi 3.0.1 (stable release) and Nuxt.js 2.12.2. It should work on different versions too, but you may need to make some adaptations here and there.\n\nLet's get started!\n\n## Install Strapi\n\nFirst things first, we begin by creating a Strapi project:\n\n```shell\nnpx create-strapi-app strapi-users --quickstart\n```\n\nWe've used the `--quickstart` flag that installs Strapi with default settings. It also tells Strapi to use SQLite as the database engine and automatically run our application.\n\n> In our installation, we used the default database, SQLite, because it doesn’t require a dedicated database server. Instead, the database is just a single file. For the sake of convenience, we'll be using it in this tutorial, but the steps in this guide also apply to different database engines.\n\nOnce the installation is done, Strapi will automatically be launched in your browser, asking you to create an administrator account.\n\nTo finish the setup and secure your app, go ahead and create a root/admin user, by filling in the necessary information:\n\n![strapi-nuxt-admin](https://api-prod.strapi.io/uploads/strapi-nuxt-admin_5c796fa837.png)\n\n\nFrom now on, you can access Strapi's local Admin interface by visiting [http://localhost:1337/admin](http://localhost:1337/admin).\n\n## Enable email confirmation\n\nBy default, the user registration process in Strapi does not include email confirmation.\n\nTo enable it, from the left sidebar of the Admin dashboard, click **Settings** then **Roles & Permissions**. Select the **Advanced Settings** tab, enable the \"Enable email confirmation\" option and save:\n\n![strapi-nuxt-enable-email-confirmation](https://api-prod.strapi.io/uploads/strapi-nuxt-enable-email-confirmation_fecfa88986.png)\n\n## Email console provider\n\nThanks to Strapi's Email plugin, we can have a Strapi instance send emails from our server's local email system or from an external provider (e.g., SendGrid).\n\nEmail setup and configuration is not within the scope of this article. We just want to make sure that the emails are being fired when expected and inspect their content.\n\nFor that, we're going to use [strapi-provider-email-console](https://www.npmjs.com/package/strapi-provider-email-console), a Strapi email mock provider used in development, that instead of sending, outputs the emails to the console.\n\nStop the Strapi app that's running, navigate to the project's root directory, and install the email mock provider:\n\n```shell\ncd strapi-users\nnpm install strapi-provider-email-console\n```\n\nOnce the installation is done, you'll need to add in the provider. Create the file `./config/plugins.js` and paste the following code:\n\n```javascript\nmodule.exports = ({ env }) => ({\n email: {\n provider: \"console\",\n },\n});\n```\n\nSince we've used `--quickstart` the first time we ran our Strapi app, before running it in development mode, we need to install the dependencies:\n\n```shell\nnpm install\n```\n\nOnce that's done, start the Strapi app in development mode with the command:\n\n```shell\nnpm run develop\n```\n\n## Create a Nuxt app\n\nNow, let's change gears and focus on the frontend app. It will be a Server-Side Rendered \"Universal\" Nuxt.js app.\n\nTo get started quickly, open a new terminal and create the project using Nuxt's scaffolding tool:\n\n```shell\nnpx create-nuxt-app nuxt-auth\n```\n\nGo through the guide and make sure to select the following options:\n\n- axios and dotenv in the **Nuxt.js modules** step\n- Bulma CSS in the **UI framework** step, which we'll use to style our app\n\n![strapi-nuxt-create-nuxt-app-options](https://api-prod.strapi.io/uploads/strapi-nuxt-create-nuxt-app-options_d06664481e.png)\n\nStrapi's API URL will vary depending on the environment. So, we want to have it dynamically loaded from an environment variable.\n\nOnce the tool finishes creating the app, edit the `.env` file in the project's root directory, adding a new environment variable that points to the URL of the Strapi app that's running locally:\n\n```\nAPI_AUTH_URL=http://localhost:1337\n```\n\nNext, navigate to the project's root directory and install the required Nuxt Auth module dependency:\n\n```shell\ncd nuxt-auth\nnpm install @nuxtjs/auth\n```\n\nOnce the installation is done, add the module `@nuxtjs/auth` in `./nuxt.config.js`:\n\n```javascript\nmodules: [\n // Doc: https://github.com/nuxt-community/modules/tree/master/packages/bulma\n '@nuxtjs/bulma',\n // Doc: https://axios.nuxtjs.org/usage\n '@nuxtjs/axios',\n // Doc: https://github.com/nuxt-community/dotenv-module\n '@nuxtjs/dotenv',\n '@nuxtjs/auth'\n],\n```\n\nAt the top of `nuxt.config.js`, add also the following code to load the environment variables:\n\n```javascript\nrequire(\"dotenv\").config();\n```\n\nOne last step we need to do in this file. Configure the base URL that axios will use when making API requests. In our case, this corresponds to the environment variable we've added previously:\n\n```javascript\naxios: {\n baseURL: process.env.API_AUTH_URL\n},\n```\n\n## Configure Nuxt Auth\n\nThe Auth module uses Vuex's state management to store the user authentication status and user info.\n\nEnable the Vuex store by creating a file `./store/index.js` with the store getters:\n\n```javascript\nexport const getters = {\n isAuthenticated(state) {\n return state.auth.loggedIn;\n },\n\n loggedInUser(state) {\n return state.auth.user;\n },\n};\n```\n\nNow we are ready to configure the Auth module. The default, general-purpose authentication scheme - supporting Cookie and JWT login flows - is named `local`. Let's now map its endpoints with Strapi's authentication endpoints.\n\nPaste the code below into `./nuxt.config.js`:\n\n```javascript\n/*\n ** Auth module configuration\n ** See https://auth.nuxtjs.org/schemes/local.html#options\n */\nauth: {\n strategies: {\n local: {\n endpoints: {\n login: {\n url: 'auth/local',\n method: 'post',\n propertyName: 'jwt'\n },\n user: {\n url: 'users/me',\n method: 'get',\n propertyName: false\n },\n logout: false\n }\n }\n }\n},\n```\n\nWe've set up two endpoints:\n\n- `login`: authenticates the user. On successful authentication, the JWT token will be available in the `jwt` property of the response object.\n- `user`: retrieves the authenticated user's info. If the user is authenticated, the JWT token will be added to the request, allowing Strapi to identify the user. Since the response object is already the user info itself, we set `propertyName` to `false`.\n\nWe've also disabled the `logout` endpoint, since logging out a user is only done locally and doesn't require any request to Strapi's API. The token is simply removed from the local storage when the user logs out.\n\n## Navbar Component\n\nCreate a file `./components/Navbar.vue` with the following code:\n\n```vue\n<template>\n <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n <div class=\"navbar-brand\">\n <nuxt-link class=\"navbar-item\" to=\"/\">Home</nuxt-link>\n\n <a\n role=\"button\"\n class=\"navbar-burger burger\"\n aria-label=\"menu\"\n aria-expanded=\"false\"\n data-target=\"navbarBasicExample\"\n >\n <span aria-hidden=\"true\"></span>\n <span aria-hidden=\"true\"></span>\n <span aria-hidden=\"true\"></span>\n </a>\n </div>\n\n <div id=\"navbarBasicExample\" class=\"navbar-menu\">\n <div v-if=\"isAuthenticated\" class=\"navbar-start\">\n <div class=\"navbar-item has-dropdown is-hoverable\">\n <a class=\"navbar-link\">\n {{ loggedInUser.username }}\n </a>\n\n <div class=\"navbar-dropdown\">\n <a class=\"navbar-item\" href=\"/profile\">My Profile</a>\n <hr class=\"navbar-divider\" />\n <a class=\"navbar-item\" @click=\"logout\">Logout</a>\n </div>\n </div>\n </div>\n\n <div v-if=\"!isAuthenticated\" class=\"navbar-end\">\n <div class=\"navbar-item\">\n <div class=\"buttons\">\n <nuxt-link class=\"button is-primary\" to=\"/register\">\n <strong>Register</strong>\n </nuxt-link>\n <nuxt-link class=\"button is-light\" to=\"/login\">\n Log in\n </nuxt-link>\n </div>\n </div>\n </div>\n </div>\n </nav>\n</template>\n```\n\nLet us make the component functional by adding the following `<script></script>`code:\n\n```vue\n<script>\nimport { mapGetters } from \"vuex\";\n\nexport default {\n computed: {\n ...mapGetters([\"isAuthenticated\", \"loggedInUser\"]),\n },\n mounted() {\n // Get all \"navbar-burger\" elements\n const $navbarBurgers = Array.prototype.slice.call(\n document.querySelectorAll(\".navbar-burger\"),\n 0\n );\n // Check if there are any navbar burgers\n if ($navbarBurgers.length > 0) {\n // Add a click event on each of them\n $navbarBurgers.forEach((el) => {\n el.addEventListener(\"click\", () => {\n // Get the target from the \"data-target\" attribute\n const target = el.dataset.target;\n const $target = document.getElementById(target);\n // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\n el.classList.toggle(\"is-active\");\n $target.classList.toggle(\"is-active\");\n });\n });\n }\n },\n};\n</script>\n```\n\nWe've defined the computed properties `isAuthenticated` and `loggedInUser` used in the component's template. These are mapped from the previously created store getters.\n\nThe code in the `mounted` hook comes from [Bulma's Navbar documentation](https://bulma.io/documentation/components/navbar/). Its purpose is to toggle the display of the `navbar-menu` when the `navbar-burger` icon is clicked.\n\n> The navbar burger menu is displayed on smaller screen sizes.\n\n## Default Layout\n\nEdit `./layouts/default.vue` and replace its content with the following:\n\n```vue\n<template>\n <div>\n <Navbar />\n <nuxt />\n </div>\n</template>\n\n<script>\nimport Navbar from \"~/components/Navbar\";\n\nexport default {\n components: {\n Navbar,\n },\n};\n</script>\n```\n\n## Homepage\n\nEdit `./pages/index.vue` and replace its content with the following:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <h1 class=\"title\">Nuxt Strapi Auth</h1>\n </div>\n </section>\n</template>\n```\n\nThis is what we have so far:\n\n![strapi-nuxt-homepage](https://api-prod.strapi.io/uploads/strapi-nuxt-homepage_1c9ebc527c.png)\n\n## Notification Component\n\nLet’s create a Notification component to give feedback to the user.\n\nIf everything goes as expected it should display a success message. Otherwise, an error message should be displayed.\n\nCreate a file `./components/Notification.vue` and paste into it the code below:\n\n```vue\n<template>\n <div :class=\"`is-${type}`\" class=\"notification\">\n {{ message }}\n </div>\n</template>\n\n<script>\nexport default {\n name: \"Notification\",\n props: {\n type: {\n type: String,\n default: \"success\",\n validator: (val) => [\"danger\", \"success\"].includes(val),\n },\n message: {\n type: String,\n default: \"\",\n },\n },\n};\n</script>\n```\n\n## Register\n\nCreate a file `./pages/register.vue` and paste into it the code below:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <div class=\"columns\">\n <div class=\"column is-4 is-offset-4\">\n <h2 class=\"title has-text-centered\">Register</h2>\n\n <Notification v-if=\"success\" type=\"success\" :message=\"success\" />\n <Notification v-if=\"error\" type=\"danger\" :message=\"error\" />\n\n <form v-if=\"!success\" method=\"post\" @submit.prevent=\"register\">\n <div class=\"field\">\n <label class=\"label\">Username</label>\n <div class=\"control\">\n <input\n v-model=\"username\"\n type=\"text\"\n class=\"input\"\n name=\"username\"\n required\n />\n </div>\n </div>\n <div class=\"field\">\n <label class=\"label\">Email</label>\n <div class=\"control\">\n <input\n v-model=\"email\"\n type=\"email\"\n class=\"input\"\n name=\"email\"\n required\n />\n </div>\n </div>\n <div class=\"field\">\n <label class=\"label\">Password</label>\n <div class=\"control\">\n <input\n v-model=\"password\"\n type=\"password\"\n class=\"input\"\n name=\"password\"\n required\n />\n </div>\n </div>\n <div class=\"control\">\n <button type=\"submit\" class=\"button is-dark is-fullwidth\">\n Register\n </button>\n </div>\n </form>\n\n <div class=\"has-text-centered\" style=\"margin-top: 20px\">\n Already got an account? <nuxt-link to=\"/login\">Login</nuxt-link>\n </div>\n </div>\n </div>\n </div>\n </section>\n</template>\n\n<script>\nimport Notification from \"~/components/Notification\";\n\nexport default {\n components: {\n Notification,\n },\n data() {\n return {\n username: \"\",\n email: \"\",\n password: \"\",\n success: null,\n error: null,\n };\n },\n methods: {\n async register() {\n this.error = null;\n try {\n this.$axios.setToken(false);\n await this.$axios.post(\"auth/local/register\", {\n username: this.username,\n email: this.email,\n password: this.password,\n });\n this.success = `A confirmation link has been sent to your email account. \\\n Please click on the link to complete the registration process.`;\n } catch (e) {\n this.error = e.response.data.message[0].messages[0].message;\n }\n },\n },\n};\n</script>\n```\n\nBefore making the request to Strapi's register endpoint, we make sure no token is added as a request header.\n\n### Redirect after confirmation\n\nBefore we can test the register feature, we need to tell Strapi where to redirect the user after the confirmation link is accessed.\n\nTo specify this link, from the left sidebar of the Admin dashboard, click **Roles & Permissions**. Select the **Advanced Settings** tab, paste `https://web.archive.org/web/20210327095128/http://localhost:3000/login` in the \"Redirection url\" input, and save:\n\n![strapi-nuxt-redirect-after-confirmation](https://api-prod.strapi.io/uploads/strapi-nuxt-redirect-after-confirmation_d7aaf76d8e.png)\n\n### Configure Strapi's Server URL\n\nWe also need to configure Strapi's public URL. This URL will be used to prefix the confirmation link that's sent.\n\nInside the Strapi project root folder, create a `.env` file by copying it from `.env.example`:\n\n```shell\ncp .env.example .env\n```\n\nEdit `.env` and add the `URL` environment variable:\n\n```\nURL=http://localhost:1337\n```\n\nEdit `./config/server.js` and add the `url` property:\n\n```javascript\nurl: env(\"URL\", \"http://localhost:1337\"),\n```\n\n> Note that we've set this configuration in the development environment. In production, you'll probably want to have SSL, so you'll also need to install and configure an upstream proxy application, such as Nginx - and [make Strapi aware of it](https://strapi.io/documentation/v3.x/deployment/nginx-proxy.html).\n\n### Testing Register\n\nWe're now ready to test the register feature.\n\nOpen a new terminal - so that the Strapi app is still running - and run the Nuxt app in development mode:\n\n```shell\nnpm run dev\n```\n\nNavigate to [http://localhost:3000/register](http://localhost:3000/register) and register a user:\n\n![strapi-nuxt-register-page](https://api-prod.strapi.io/uploads/strapi-nuxt-register-page_e99d25186c.png)\n\nIf the registration was successful, a success message is displayed by the Notification component, requesting that the user completes the registration process by clicking the confirmation link that was sent:\n\n![strapi-nuxt-register-success](https://api-prod.strapi.io/uploads/strapi-nuxt-register-success_84ed121bc2.png)\n\nIf an error occurs, the error message is displayed by the Notification component we've created previously:\n\n![strapi-nuxt-register-error](https://api-prod.strapi.io/uploads/strapi-nuxt-register-error_f237376772.png)\n\nSwitch to the console where Strapi is running and confirm that you see the email:\n\n![strapi-nuxt-register-email-console](https://api-prod.strapi.io/uploads/strapi-nuxt-register-email-console_c2897aa887.png)\n\nCopy the confirmation link and access it in your browser. This action completes the registration but you'll see a \"This page could not be found\" error in your browser. That's because we haven't implemented the login page yet.\n\nLet's fix that.\n\n## Login\n\nCreate a file `./pages/login.vue` and paste into it the code below:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <div class=\"columns\">\n <div class=\"column is-4 is-offset-4\">\n <h2 class=\"title has-text-centered\">Log In</h2>\n\n <Notification v-if=\"error\" type=\"danger\" :message=\"error\" />\n\n <form method=\"post\" @submit.prevent=\"login\">\n <div class=\"field\">\n <label class=\"label\">Email</label>\n <div class=\"control\">\n <input\n v-model=\"email\"\n type=\"email\"\n class=\"input\"\n name=\"email\"\n />\n </div>\n </div>\n <div class=\"field\">\n <label class=\"label\">Password</label>\n <div class=\"control\">\n <input\n v-model=\"password\"\n type=\"password\"\n class=\"input\"\n name=\"password\"\n />\n </div>\n </div>\n <div class=\"control\">\n <button type=\"submit\" class=\"button is-dark\">\n Log In\n </button>\n </div>\n </form>\n <div style=\"margin-top: 20px\">\n <p>\n Don't have an account?\n <nuxt-link to=\"/register\">Register</nuxt-link>\n </p>\n <p>\n <nuxt-link to=\"/forgot-password\">Forgot Password?</nuxt-link>\n </p>\n </div>\n </div>\n </div>\n </div>\n </section>\n</template>\n\n<script>\nimport Notification from \"~/components/Notification\";\n\nexport default {\n components: {\n Notification,\n },\n data() {\n return {\n email: \"\",\n password: \"\",\n error: null,\n };\n },\n methods: {\n async login() {\n this.error = null;\n try {\n await this.$auth.loginWith(\"local\", {\n data: {\n identifier: this.email,\n password: this.password,\n },\n });\n this.$router.push(\"/\");\n } catch (e) {\n this.error = e.response.data.message[0].messages[0].message;\n }\n },\n },\n};\n</script>\n```\n\n### Testing Login\n\nNavigate to [http://localhost:3000/login](http://localhost:3000/login) and login with a previously registered user:\n\n![strapi-nuxt-login](https://api-prod.strapi.io/uploads/strapi-nuxt-login_70707f9adc.png)\n\nNotice the changes in the Navbar:\n\n![strapi-nuxt-login-navbar](https://api-prod.strapi.io/uploads/strapi-nuxt-login-navbar_70d53a78c9.png)\n\n## Logout\n\nLet's now add the `logout` method that's triggered when the user clicks the **Logout** Navbar link.\n\nEdit `./components/Navbar.vue` and add the following code under `mounted()`:\n\n```javascript\nmethods: {\n async logout() {\n await this.$auth.logout()\n }\n }\n```\n\n## User Profile\n\nTime for the user profile page.\n\nCreate a file `./pages/profile.vue` with the following code:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <h2 class=\"title\">My Profile</h2>\n <div class=\"content\">\n <p>\n <strong>Username:</strong>\n {{ loggedInUser.username }}\n </p>\n <p>\n <strong>Email:</strong>\n {{ loggedInUser.email }}\n </p>\n </div>\n </div>\n </section>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\n\nexport default {\n middleware: \"auth\",\n computed: {\n ...mapGetters([\"loggedInUser\"]),\n },\n};\n</script>\n```\n\nThe `auth` middleware guarantees that only logged in users can access this page.\n\n## Guest middleware\n\nIf the user is already logged in, it's probably a good idea to block the access to the register and login pages.\n\nCreate a file `./middleware/guest.js`:\n\n```javascript\nexport default function ({ store, redirect }) {\n if (store.state.auth.loggedIn) {\n return redirect(\"/\");\n }\n}\n```\n\nDefine the new middleware in `./pages/register.vue` and `./pages/login.vue`:\n\n```javascript\nexport default {\n middleware: \"guest\",\n};\n```\n\n## Password Reset\n\nLet's now implement a password reset mechanism.\n\nThis will be achieved with the following workflow:\n\n1. In the **Forgot Password Page**, a user submits email.\n2. If the email is in Strapi's user database, a user receives an email with a link to the **Reset Password Page** containing a reset code as a URL parameter.\n3. User clicks the link and specifies a new password.\n4. The new password is sent to Strapi, along with the reset code.\n5. The password is updated and the user can now use it to log in.\n\n### Forgot Password Page\n\nCreate a file `./pages/forgot-password.vue`:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <div class=\"columns\">\n <div class=\"column is-4 is-offset-4\">\n <h2 class=\"title has-text-centered\">Forgot Password</h2>\n\n <Notification v-if=\"success\" type=\"success\" :message=\"success\" />\n <Notification v-if=\"error\" type=\"danger\" :message=\"error\" />\n\n <form v-if=\"!success\" method=\"post\" @submit.prevent=\"forgotPassword\">\n <div class=\"field\">\n <label class=\"label\">Email</label>\n <div class=\"control\">\n <input\n v-model=\"email\"\n type=\"email\"\n class=\"input\"\n name=\"email\"\n />\n </div>\n </div>\n <div class=\"control\">\n <button type=\"submit\" class=\"button is-dark\">\n Email me a reset link\n </button>\n </div>\n </form>\n </div>\n </div>\n </div>\n </section>\n</template>\n\n<script>\nimport Notification from \"~/components/Notification\";\n\nexport default {\n middleware: \"guest\",\n components: {\n Notification,\n },\n data() {\n return {\n email: \"\",\n success: null,\n error: null,\n };\n },\n methods: {\n async forgotPassword() {\n try {\n await this.$axios.post(\"auth/forgot-password\", {\n email: this.email,\n });\n this.error = null;\n this.success = `A reset password link has been sent to your email account. \\\n Please click on the link to complete the password reset.`;\n } catch (e) {\n this.error = e.response.data.message[0].messages[0].message;\n }\n },\n },\n};\n</script>\n```\n\n> In our implementation we're disclosing whether the email is registered or not. The reason is to show that Strapi gives us that information. However, for applications with greater security requirements, we could also just display the success message, whether Strapi responds with an error or not - helping the prevention of phishing attacks.\n\n![strapi-nuxt-reset-password-form](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password-form_980b144b8b.png)\n\nThe method `forgotPassword` sends a request to Strapi's `auth/forgot-password` endpoint. If the email address exists in Strapi's user database, an email is sent with a link to a reset password page in the frontend app.\n\nTo specify this link, from the left sidebar of the Admin dashboard, click **Roles & Permissions**. Select the **Advanced Settings** tab, paste `https://web.archive.org/web/20210327095128/http://localhost:3000/reset-password` in the \"Reset password page\" input, and save:\n\n![strapi-nuxt-reset-password-page-config](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password-page-config_c4b29ccadd.png)\n\nStrapi will attach to it a URL parameter with the code that's required to successfully reset the user password.\n\n### Reset Password Page\n\nLet's now create the page that will allow the user to define a new password. Create a file `./pages/reset-password.vue` and paste the following code into it:\n\n```vue\n<template>\n <section class=\"section\">\n <div class=\"container\">\n <div class=\"columns\">\n <div class=\"column is-4 is-offset-4\">\n <h2 class=\"title has-text-centered\">Reset Password</h2>\n\n <Notification v-if=\"success\" type=\"success\" :message=\"success\" />\n <Notification v-if=\"error\" type=\"danger\" :message=\"error\" />\n\n <form v-if=\"!success\" method=\"post\" @submit.prevent=\"resetPassword\">\n <div class=\"field\">\n <label class=\"label\">New Password</label>\n <div class=\"control\">\n <input\n v-model=\"password1\"\n type=\"password\"\n class=\"input\"\n name=\"password\"\n />\n </div>\n </div>\n <div class=\"field\">\n <label class=\"label\">Confirm New Password</label>\n <div class=\"control\">\n <input\n v-model=\"password2\"\n type=\"password\"\n class=\"input\"\n name=\"password\"\n />\n </div>\n </div>\n <div class=\"control\">\n <button type=\"submit\" class=\"button is-dark\">\n Reset Password\n </button>\n </div>\n </form>\n </div>\n </div>\n </div>\n </section>\n</template>\n\n<script>\nimport Notification from \"~/components/Notification\";\n\nexport default {\n middleware: \"guest\",\n components: {\n Notification,\n },\n asyncData(context) {\n if (!context.route.query.code) context.redirect(\"/forgot-password\");\n else\n return {\n code: context.route.query.code,\n };\n },\n data() {\n return {\n password1: \"\",\n password2: \"\",\n success: null,\n error: null,\n };\n },\n methods: {\n async resetPassword() {\n this.error = null;\n if (this.password1 !== this.password2) {\n this.error = \"Passwords do not match.\";\n return;\n }\n try {\n await this.$axios.post(\"auth/reset-password\", {\n code: this.code,\n password: this.password1,\n passwordConfirmation: this.password2,\n });\n this.success =\n \"Password updated successfully. You can now use it to log in to your account.\";\n } catch (e) {\n this.error = e.response.data.message[0].messages[0].message;\n }\n },\n },\n};\n</script>\n```\n\nOne more thing before we're able to test the password reset feature. We need to enable the Public Role permission for the `auth/reset-password` endpoint.\n\nTo specify this link, from the left sidebar of the Admin dashboard, click **Roles & Permissions**. Select the **Advanced Settings** tab, paste `https://web.archive.org/web/20210327095128/http://localhost:3000/reset-password` in the \"Reset password page\" input, and save:\n\nTo do so, from the left sidebar of the Admin dashboard, click **Roles & Permissions**. Click **Public** and under **Permissions** expand the\n**USERS-PERMISSIONS** plugin. Under **Auth** check the option \"resetpassword\" and save:\n\n![strapi-nuxt-reset-password](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password_6660d94be3.png)\n\n### Testing Password Reset\n\nVisit `https://web.archive.org/web/20210327095128/http://localhost:3000/forgot-password` in your browser, fill in the \"Email\" input with an email that has been registered before and click **Email me\na reset link**.\n\n![strapi-nuxt-reset-password-email-sent](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password-email-sent_baea976661.png)\n\nSwitch to the terminal where Strapi is running and confirm that the mock email\nis there:\n\n![strapi-nuxt-reset-password-email-console](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password-email-console_32b9edc707.png)\n\nCopy the entire link and access it in your browser:\n\n![strapi-nuxt-reset-password-form](https://staging.strapi.io/uploads/strapi-nuxt-reset-password-form_bcd3ce3c8f.png)\n\nFill in the form and click \"Reset Password\". This action will reset the user password:\n\n![strapi-nuxt-reset-password-success](https://api-prod.strapi.io/uploads/strapi-nuxt-reset-password-success_2bb880a54e.png)\n\n## Token Expiration\n\nAwesome! We've done a lot, but there's still something missing before we wrap up.\n\nIf the JWT token expires, subsequent requests to Strapi will return a 401 Unauthorized error.\n\nTo deal with this, we'll intercept error responses in `axios` and check if the status code is `401`. If it is, we redirect the user to the login page.\n\nCreate a file `./plugins/axios.js`:\n\n```javascript\nexport default function ({ $axios, redirect }) {\n $axios.onError((error) => {\n const code = parseInt(error.response && error.response.status);\n if (code === 401) redirect(\"/login\");\n });\n}\n```\n\nIn `nuxt.config.js` import the plugin we've just created:\n\n```javascript\nplugins: ['~plugins/axios'],\n```\n\nNow, when the JWT expires the user will be gracefully redirected to the login page.\n\n## Conclusion\n\nHopefully, you've found this tutorial helpful for implementing Strapi authentication in your Nuxt app!\n\nYou should now have a fully built, ready to be deployed in production authentication flow, through which users can register, login, and reset their\npassword.\n\nThe source code for both projects can be found on GitHub:\n\n- [strapi-users](https://github.com/ramigs/strapi-users)\n- [nuxt-auth](https://github.com/ramigs/nuxt-auth)\n\nDon't forget to try our Nuxt.js starter:\n\n- [Blog](https://strapi.io/blog/strapi-starter-nuxt-blog)\n- [Ecommerce](https://strapi.io/blog/strapi-starter-nuxt-js-e-commerce)\n\n> **Please note:** Since we initially published this blog post, we released new versions of Strapi and tutorials may be outdated. Sorry for the inconvenience if it's the case. Please help us [by reporting it here](https://github.com/strapi/community-content/issues/new/choose).\n\n  - [Try live demo](https://strapi.io/demo)\n  - [Starters](https://strapi.io/starters)\n  - [Become a Strapi expert](https://academy.strapi.io/)\n  - [Find help in our Forum](https://forum.strapi.io/)\n  - [Strapi on Youtube](https://www.youtube.com/c/Strapi/featured)\n  - [Try Enterprise Edition](https://strapi.io/enterprise)\n\n","user":22,"created_at":"2020-08-25T13:48:56.263Z","updated_at":"2021-02-12T14:49:07.867Z","published_at":"2020-08-25T13:48:56.263Z"},{"id":237,"title":"How to use the @nuxtjs/strapi Module to add Authentication to a Nuxt Application","slug":"how-to-use-the-nuxt-strapi-module-to-add-authentication-to-a-nuxt-application","publishedAt":"2021-02-08T11:00:00.000Z","status":"published","content":"> Our community is looking for talented writers who are passionate about our ecosystem (jamstack, open-source, javascript) and willing to share their knowledge/experiences through our Write for the community program.\n<p align=\"center\">\n<a href=\"https://strapi.io/write-for-the-community\">\n<img src=\"https://assets.strapi.io/uploads/Join_the_program_498526acbe.svg#small\" />\n</a>\n</p>\n\nIn this tutorial, we’ll be learning about authentication (local authentication) in Strapi. We’ll be creating a simple blog app where authenticated users can create, read and delete posts, whereas unauthenticated users can only view a list of posts but cannot read, create, or delete posts. We’ll have a login route, signup route, and a create post route where users can create posts from. We’ll also be working with Image uploads to see how users can upload images from Nuxt.js frontend to our Strapi backend.\n\n\nWhat you’ll need for this tutorial \n\n- Basic Knowledge of [V](https://vue.js.org)[ue.js](https://vue.js.org)\n- Knowledge of JavaScript\n- [Node.js](https://nodejs.org) (v14 recommended for strapi)\n- [MongoDB](https://mongodb.com) \n\nTable of Content\n\n- Installing [Strapi](http://strapi.io)\n- Building API with Strapi\n- Installing [Nuxt.js](http://nuxtjs.org)\n- Installing [@nuxtjs/strapi](https://strapi.nuxtjs.org)\n- Building the frontend with Nuxt.js\n\nLet’s get started!\n\n## Installing Strapi\n\nAs mentioned in Strapi's documentation, Strapi is a flexible, open-source Headless CMS that gives developers the freedom to choose their favorite tools and frameworks while also allowing editors to easily manage and distribute their content. By making the admin panel and API extensible through a plugin system, Strapi enables the world's largest companies to accelerate content delivery while building beautiful digital experiences.\n\nBasically, Strapi helps us build an API in no time. I mean no hassle of creating a server from scratch. With Strapi, we can do everything literally, and it’s easily customizable. We can add our code and edit functionalities easily. Strapi is simply amazing, and I’m modest about it. I’m still stunned by what Strapi can do.\n\nStrapi provides an admin panel to edit and create APIs and also includes code that can be edited. It’s very easy to edit the code, and it makes use of JavaScript.\n\n\n![Strapi Admin panel](https://paper-attachments.dropbox.com/s_06CB13E69812BFF1B9A02D2AD8E00870D4E689AA97E45BEBACAE215F4CD6279E_1611377057560_strapi_admin.jpg)\n\n\n\n![Strapi code](https://paper-attachments.dropbox.com/s_06CB13E69812BFF1B9A02D2AD8E00870D4E689AA97E45BEBACAE215F4CD6279E_1611376866740_strapi_code.jpg)\n\n\nTo install Strapi, head over to the Strapi docs at [Strapi](https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/installation/cli.html),\nbut we want to use MongoDB as our database, so we are going to do things a little differently here, head over to [Strapi](https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations/databases/mongodb.html#mongodb-installation) docs.\nThat section of the Strapi docs shows how to use MongoDB as our default database, follow the instructions there. Make sure to have the MongoDB server running before you start the process, and leave the username and password options as blank by pressing enter when prompted.\n\n\n- To install Strapi:\n\n\n    yarn create strapi-app my-project //using yarn\n    npx create-strapi-app my-project //using npx\n\nReplace my-project with the name you wish to call your application directory, your package manager will create a directory with the name and will install Strapi.\n\nIf you have followed the instructions correctly, you should have strapi installed in your machine. \n\n\n- Run:\n\n\n    yarn develop //using yarn\n    npm run develop //using npm\n\nTo start our development server, Strapi starts our app on http://localhost:1337/admin. \n\n\n## **Building The API with Strapi**\n\nWe have Strapi up and running, the next step is to create our products content-type.\n\n1. **Creating Article content-type**\n- Click on content-types in the side menu\n- Add new content-type named article.\n- Create fields under article content-type\n- Name as short text\n- Description as short text\n- content as Rich text\n- Image as a single type.\n\n\n2. **Adding User relationship**\n- Create a relation field under article \n- Select User(from users-permissions-user) click on user has many articles relation\n- Save the article content type\n\n\n3. **Creating User and Enabling User permission and Roles**\n- Strapi provides a Users collection type by default\n- Head to settings\n- Under Users and Permissions Plugin select Roles\n- Click on Authenticated and check all Permissions.\n- Save changes then go back and click on public then check only the find and findOne permissions\n- Click save to save changes.\n- Create a user called author  with whatever credentials you’d like, but select the authenticated role, and also enable email confirmation.\n- Create an Article, then select Users_permissions_user as author. This means that the user ‘author’ created the article.\n- Save the article, and proceed.\n\nSave content-types, and now we can view our API in JSON format when we visit [http://localhost:1337/articles](http://localhost:1337/articles).\nNow that we’ve created our Strapi API, what we have to do is build our front end with Nuxt.js. Let’s do that.\n\n\n## **Installing Nuxt.js**\n\nTo install Nuxt.js visit [the Nuxt docs](https://nuxtjs.org/docs/2.x/get-started/installation).\n\nWe want to use Nuxt in SSR mode, server hosting and also Tailwind CSS as our preferred CSS framework, so go ahead and select those, then select whatever options for the rest. Preferably leave out C.I, commit-linting, style-linting and the rest but do whatever you like. All we’ll be needing in this tutorial is what I’ve mentioned above.\n\n\n- To install Nuxt.js:\n\n\n    yarn create nuxt-app <project-name> //using yarn\n    npx create-nuxt-app <project-name> //using npx\n    npm init nuxt-app <project-name> //using npm\n\nWhich will ask you some questions (name, Nuxt options, UI framework, TypeScript, linter, testing framework, etc).\n\nOnce all questions are answered, all the dependencies will be installed. The next step is to navigate to the project folder and launch it.\n\n\n- Run: \n\n\n    yarn dev //using yarn\n    npm run dev //using npm\n\nWe should have Nuxt running on [http://localhost:3000](http://localhost:3000).\n\n\n## Installing @nuxtjs/strapi\n\nWe need a way to query our Strapi backend API, and Strapi provides a very nice package for that. We could use Nuxt’s native [@nuxtjs/http](https://http.nuxtjs.org) module or [axios](https://www.npmjs.com/package/axios) to query our API but [@nuxtjs/strapi](https://strapi.nuxtjs.org) makes our life easier. To install @nuxtjs/strapi.\n\n\n- Run:\n\n\n    yarn add @nuxtjs/strapi //using yarn\n    npm install @nuxtjs/strapi //using npm\n\n\n- Open the nuxt.config.js file and add the following code to the file\n\n\n    modules: [\n      // ...other modules\n      '@nuxtjs/strapi',\n    ]\n    \n    strapi: {\n      entities: ['articles'],\n    }\n\nNow we can use @nuxtjs/strapi to make API calls, we can now continue with building our pages and components.\n\nThe @nuxtjs/strapi documentation can be found [here](https://strapi.nuxtjs.org/).\n\n\n- We’ll be using @nuxtjs/strapi in two ways \n\n\n    this.$strapi() //from properties such as methods, data, computed\n    \n    $strapi() //from nuxtjs lifecycle methods\n\n\n\n## Installing  [@nuxtjs/markdownit](https://www.npmjs.com/package/@nuxtjs/markdownit)\n\nStrapi Rich text gives us the privilege of writing markdown in our content, to parse the markdown content from the backend we need to install the @nuxtjs/markdownit package. \n\n\n- Run\n\n\n    yarn add @nuxtjs/markdownit //using yarn\n    npm install @nuxtjs/markdownit //using npm\n\n\n- Then add the following lines of code to your nuxt.config.js file.\n\n\n    modules: [\n     //...other modules\n    '@nuxtjs/markdownit'\n    ],\n    \n     markdownit: {\n        preset: 'default',\n        linkify: true,\n        breaks: true,\n        injected: true,\n        // use: ['markdown-it-div', 'markdown-it-attrs'],\n      },\n\nNow we can use @nuxtjs/markdownit to parse our markdown content.\nThe @nuxtjs/markdownit documentation can be found [here](https://www.npmjs.com/package/@nuxtjs/markdownit).\n\n\n## Building the frontend with NuxtJs\n\nWe can proceed with building the user-interface of our blog app.\n\n**Building the Signup page**\n\n\n- Execute the following lines of code to create a signup.vue file in the pages directory.\n\n\n    cd pages\n    touch signup.vue\n\n \n\n-  Fill signup.vue with the following lines of code.\n\n \n\n     <template>\n      <div class=\"w-4/5 mx-auto md:w-1/2 text-center my-12\">\n        <div v-show=\"error !== ''\" class=\"p-3 border\">\n          <p>{{ error }}</p>\n        </div>\n        <h1 class=\"font-bold text-2xl md:text-4xl mt-5\">Signup</h1>\n        <form @submit=\"createUser\">\n          <div>\n            <input\n              v-model=\"email\"\n              class=\"p-3 my-5 border w-full\"\n              type=\"email\"\n              placeholder=\"email\"\n            />\n          </div>\n          <div>\n            <input\n              v-model=\"username\"\n              class=\"p-3 my-5 border w-full\"\n              type=\"text\"\n              placeholder=\"username\"\n            />\n          </div>\n          <div>\n            <input\n              v-model=\"password\"\n              class=\"p-3 my-5 border w-full\"\n              type=\"password\"\n              placeholder=\"password\"\n            />\n          </div>\n          <div>\n            <button\n              class=\"button--green\"\n              :disabled=\"email === '' || password === '' || username === ''\"\n              type=\"submit\"\n            >\n              Signup\n            </button>\n          </div>\n        </form>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          email: '',\n          username: '',\n          password: '',\n          error: '',\n        }\n      },\n      methods: {\n        async createUser(e) {\n          e.preventDefault()\n          try {\n            const newUser = await this.$strapi.register({\n              email: this.email,\n              username: this.username,\n              password: this.password,\n            })\n            console.log(newUser)\n            if (newUser !== null) {\n              this.error = ''\n              this.$nuxt.$router.push('/articles')\n            }\n          } catch (error) {\n            this.error = error.message\n          }\n        },\n      },\n      middleware: 'authenticated',\n    }\n    </script>\n    <style></style>\n\nWe just built our signup logic. When users provide their email, username and password, then click the signup button, we invoke the createUser method. All we’re doing in this method is registering a new user using the @nuxtjs/strapi module i.e this.$strapi.register() method, then we redirect the user to the ‘/articles’ route, if the email belongs to an existing user an error message is displayed at the top of the page. Finally, we’re using nuxtjs middleware feature to invoke a custom made middleware that we’re going to create.\n\n**Building the Login page**\n\n\n- Execute the following lines of code to create a login.vue file in the pages directory.\n\n\n    touch login.vue\n\n\n- Fill up login.vue with the following lines of code.\n\n\n    <template>\n      <div class=\"w-4/5 mx-auto md:w-1/2 text-center my-12\">\n        <div v-show=\"error !== ''\" class=\"p-3 border\">\n          <p>{{ error }}</p>\n        </div>\n        <h1 class=\"font-bold text-2xl md:text-4xl mt-5\">Login</h1>\n        <form @submit=\"loginUser\">\n          <div>\n            <input\n              v-model=\"identifier\"\n              class=\"p-3 my-5 border w-full\"\n              type=\"email\"\n              placeholder=\"email\"\n            />\n          </div>\n          <div>\n            <input\n              v-model=\"password\"\n              class=\"p-3 my-5 border w-full\"\n              type=\"password\"\n              placeholder=\"password\"\n            />\n          </div>\n          <div>\n            <button\n              :disabled=\"identifier === '' || password === ''\"\n              class=\"button--green\"\n              type=\"submit\"\n            >\n              Login\n            </button>\n          </div>\n        </form>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          identifier: '',\n          password: '',\n          error: '',\n        }\n      },\n      methods: {\n        async loginUser(e) {\n          e.preventDefault()\n          try {\n            const user = await this.$strapi.login({\n              identifier: this.identifier,\n              password: this.password,\n            })\n            console.log(user)\n            if (user !== null) {\n              this.error = ''\n              this.$nuxt.$router.push('/articles')\n            }\n          } catch (error) {\n            this.error = 'Error in login credentials'\n          }\n        },\n      },\n      middleware: 'authenticated',\n    }\n    </script>\n    <style></style>\n\nWe’ve just built our login logic, users provide a unique identifier(email) and password then click on the login button which calls the loginUser method. This method attempts to log the user in using the @nuxtjs/strapi module i.e this.$strapi.login() method and returns a user object if a user is found, or an error if the credentials are invalid. The user is redirected to the ‘/article’ route if the process was successful or an error message is displayed if an error occurred.\n\n**Creating our authenticated middleware**\n\nLet’s create our middleware function:\n\n\n- Execute the following lines of code to create an authenticated.js file in the middleware directory.\n\n\n    cd middleware\n    touch authenticated.js\n\n\n- Fill up authenticated.js with the following code.\n\n\n    export default function ({ $strapi, redirect }) {\n      if ($strapi.user) {\n        redirect('/articles')\n      }\n    }\n\nWe have set up a middleware that checks if a user is logged in or not. If a user is logged in we redirect them to the ‘/articles’ page, this middleware is useful for preventing a logged in user from accessing the Login, Signup and ‘/’ route. We don’t want to have a Logged in user signing up on our app for whatsoever reason.\n\n**Building the Nav component**\n\n\n- Execute the following lines of code to create a Nav.vue file in the components directory.\n\n\n    cd components\n    touch Nav.vue\n\n\n- Fill up the file with the following code\n\n\n    <template>\n      <div\n        class=\"flex space-x-5 items-center justify-center bg-black text-white py-3 sm:py-5\"\n      >\n        <NuxtLink to=\"/articles\">Articles</NuxtLink>\n        <div v-if=\"$strapi.user === null\">\n          <NuxtLink class=\"border-r px-3\" to=\"/login\">Login</NuxtLink>\n          <NuxtLink class=\"border-r px-3\" to=\"/signup\">Signup</NuxtLink>\n        </div>\n        <div v-if=\"$strapi.user !== null\">\n          <span class=\"border-r px-3\">{{ $strapi.user.username }}</span>\n          <NuxtLink class=\"border-r px-3\" to=\"/new\">Create Post</NuxtLink>\n          <button class=\"pl-3\" @click=\"logout\">Logout</button>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      name: 'Nav',\n      methods: {\n        async logout() {\n          await this.$strapi.logout()\n          this.$nuxt.$router.push('/')\n        },\n      },\n    }\n    </script>\n    <style></style>\n\nIn the Nav component, all we’re doing is building a navigation bar for our application. using the @nuxt/strapi module, we’re checking if there is no logged in user, then we display a sign up and login option in the nav bar, but if a user is logged in, we display their username, logout option and a create post link.\n\n\n- Note: \n\n\n    $strapi.user //returns the loggedin user or null\n\nWhen a User clicks the logout button, we invoke a logout function which in turn invokes the $strapi.logout() function that logs the user out, the we redirect the user to the ‘/’ route using the $nuxt.$router.push() method.\n\n**Building the Homepage**\n\n\n- Execute the following lines of code to create an index.vue file in the pages directory.\n\n\n    cd pages\n    code index.vue\n\n\n- Fill up the index.vue file with the following code.\n\n\n    <template>\n      <div class=\"container\">\n        <div>\n          <h1 class=\"title\">Welcome To The BlogApp</h1>\n          <div class=\"links\">\n            <NuxtLink to=\"/login\" class=\"button--green\"> Login </NuxtLink>\n            <NuxtLink to=\"/articles\" class=\"button--grey\"> Continue Free </NuxtLink>\n          </div>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      middleware: 'authenticated',\n    }\n    </script>\n    <style>\n    /* Sample `apply` at-rules with Tailwind CSS\n    .container {\n    @apply min-h-screen flex justify-center items-center text-center mx-auto;\n    }\n    */\n    .container {\n      margin: 0 auto;\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    }\n    .title {\n      font-family: 'Quicksand', 'Source Sans Pro', -apple-system, BlinkMacSystemFont,\n        'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n      display: block;\n      font-weight: 300;\n      font-size: 80px;\n      color: #35495e;\n      letter-spacing: 1px;\n    }\n    .subtitle {\n      font-weight: 300;\n      font-size: 42px;\n      color: #526488;\n      word-spacing: 5px;\n      padding-bottom: 15px;\n    }\n    .links {\n      padding-top: 15px;\n    }\n    </style>\n\nWhat we have here is our homepage. We’re using Nuxt.js middleware feature to invoke a custom made middleware that we created.\n\n**Building the articles page**\n\n\n- Execute the following lines of code to create a articles.vue file in the pages directory.\n\n\n    cd pages\n    touch articles.vue\n\n\n- Fill it up with the following code.\n\n\n    <template>\n      <div>\n        <Nav class=\"mx-auto sticky top-0\" />\n        <h1 class=\"text-center my-5\">All our articles</h1>\n        <div\n          v-show=\"error !== ''\"\n          class=\"sticky z-100 border p-5 m-3 top-0 bg-black text-white text-center mx-auto w-4/5 sm:w-4/5 md:w-4/5 lg:w-1/2\"\n        >\n          <p class=\"m-1 sm:m-3\">{{ error }}</p>\n          <button class=\"button--grey\" @click=\"resetError()\">Ok</button>\n        </div>\n        <div\n          v-for=\"(article, i) in data\"\n          :key=\"i\"\n          class=\"sm:flex sm:space-x-5 my-5 shadow-lg mx-auto w-4/5 sm:w-4/5 md:w-4/5 lg:w-1/2\"\n        >\n          <img\n            :src=\"`https://web.archive.org/web/20210327095128/http://localhost:1337${article.image.url}`\"\n            class=\"max-h-screen sm:h-48\"\n          />\n          <div class=\"px-2 sm:pr-2 sm:text-left text-center\">\n            <h3 class=\"font-bold my-3\">{{ article.Title }}</h3>\n            <p class=\"my-3\">{{ article.description }}</p>\n            <button class=\"button--green mb-4 sm:mb-0\" @click=\"readPost(article)\">\n              Read more\n            </button>\n          </div>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      async asyncData({ $strapi, $md }) {\n        const data = await $strapi.$articles.find()\n        return { data }\n      },\n      data() {\n        return {\n          error: '',\n        }\n      },\n      methods: {\n        readPost(article) {\n          if (this.$strapi.user) {\n            this.error = ''\n            this.$nuxt.$router.push(`/article/${article.id}`)\n          } else {\n            this.error = 'Please Login to read articles'\n          }\n        },\n        resetError() {\n          this.error = ''\n        },\n      },\n    }\n    </script>\n    <style></style>\n\nOn this page, we’re doing a couple of things.\nFirst, we’re using the @nuxtjs/strapi module to find all our articles then we display the articles on our page, then in the readPost method, we’re checking if a user is logged in before allowing the user to read a post, if the user is not logged in we display an error message saying ‘please login to read articles’.\n\n**Building the article content page**\n\n\n- Execute the following lines of code to create a _id.vue file in the pages directory.\n\n\n    mkdir article\n    touch _id.vue\n\n\n- Fill the _id.vue file with the following code.\n\n\n    <template>\n      <div>\n        <Nav class=\"mx-auto sticky top-0\" />\n        <div class=\"w-4/5 sm:w-1/2 mx-auto my-5\">\n          <h3 class=\"my-5 font-bold text-4xl\">{{ article.Title }}</h3>\n          <img\n            :src=\"`https://web.archive.org/web/20210327095128/http://localhost:1337${article.image.url}`\"\n            class=\"max-h-screen\"\n          />\n          <p class=\"mt-5 font-bold\">\n            written by {{ article.users_permissions_user.username }}\n          </p>\n          <div class=\"my-5\" v-html=\"$md.render(article.Content)\"></div>\n          <button\n            v-if=\"\n              $strapi.user && article.users_permissions_user.id === $strapi.user.id\n            \"\n            class=\"button--grey\"\n            @click=\"deletePost(article.id)\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      async asyncData({ $strapi, route }) {\n        const id = route.params.id\n        const article = await $strapi.$articles.findOne(id)\n        return { article }\n      },\n      methods: {\n        async deletePost(id) {\n          await this.$strapi.$articles.delete(id)\n          this.$nuxt.$router.push('/articles')\n        },\n      },\n      middleware({ $strapi, redirect }) {\n        if ($strapi.user === null) {\n          redirect('/articles')\n        }\n      },\n    }\n    </script>\n    <style scoped>\n    h1 {\n      font-weight: 700;\n      font-size: 2rem;\n      margin: 0.5em 0;\n    }\n    </style>\n\nOn this page, We’re displaying individual articles with it’s complete content using markdownit i.e $md.render(article.content) , author name and more. We also display a delete button if the current user is the author of the post, we’re checking for that by using the @nuxtjs/strapi module. We don’t want an unauthorized user to delete a post they didn’t create. Finally, in the middleware, we’re checking for a logged in user. If there’s none we redirect back to the ‘/articles’ route, making sure the article content page is totally inaccessible to unauthenticated users.\n\n**Building the create article page**\n\n\n- Execute the following lines of code to create a New.vue file in the pages directory.\n\n\n    touch New.vue\n\n\n- Fill up the New.vue file with the following lines of code\n\n\n    <template>\n      <div class=\"w-4/5 mx-auto md:w-1/2 text-center my-12 overflow-hidden\">\n        <form ref=\"form\" @submit=\"createPost\">\n          <h2 class=\"font-bold text-2xl md:text-4xl mt-5\">Create a new post</h2>\n          <div>\n            <input\n              v-model=\"form.Title\"\n              name=\"Title\"\n              type=\"text\"\n              placeholder=\"title\"\n              class=\"p-3 my-3 border w-full\"\n            />\n          </div>\n          <div>\n            <input\n              v-model=\"form.description\"\n              name=\"description\"\n              type=\"text\"\n              placeholder=\"description\"\n              class=\"p-3 my-3 border w-full\"\n            />\n          </div>\n          <div>\n            <textarea\n              v-model=\"form.Content\"\n              name=\"Content\"\n              cols=\"30\"\n              rows=\"10\"\n              class=\"p-3 my-3 border w-full\"\n            ></textarea>\n          </div>\n          <div>\n            <input\n              type=\"file\"\n              name=\"Image\"\n              class=\"p-3 my-3 border w-full\"\n              @change=\"assignFileInput()\"\n            />\n          </div>\n          <div>\n            <button\n              class=\"button--green\"\n              :disabled=\"\n                form.Title === '' ||\n                form.description === '' ||\n                form.Content === '' ||\n                fileInput === ''\n              \"\n              type=\"submit\"\n            >\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          form: {\n            Title: '',\n            description: '',\n            Content: '',\n            users_permissions_user: this.$strapi.user,\n          },\n          fileInput: '',\n        }\n      },\n      methods: {\n        async createPost(e) {\n          const formData = new FormData()\n          let file\n          const formElements = this.$refs.form.elements\n          formElements.forEach((el, i) => {\n            if (el.type === 'file') {\n              file = el.files[0]\n            }\n          })\n          formData.append(`files.image`, file, file.name)\n          formData.append('data', JSON.stringify(this.form))\n          e.preventDefault()\n          await this.$strapi.$articles.create(formData)\n          this.$nuxt.$router.push('/articles')\n        },\n        assignFileInput() {\n          const formElements = this.$refs.form.elements\n          formElements.forEach((el, i) => {\n            if (el.type === 'file') {\n              this.fileInput = el.files[0] !== undefined ? el.files[0].name : ''\n            }\n          })\n        },\n      },\n      middleware({ $strapi, redirect }) {\n        if (!$strapi.user) {\n          redirect('/articles')\n        }\n      },\n    }\n    </script>\n    <style></style>\n\nWe just created the logic to enable authenticated users to create new articles. The logic is complicated especially the file upload logic so let’s work through it step by step.\nWe built the  content creation form as usual, with fields for title, description, image upload and content and the create button. using the v-model directive we link up the fields with their respective data property, file input do not support the v-model directive so we’ve built a workaround. What we’ve done is create an assignInput() method that is invoked when the field input with file type changes, when a change occurs we check if the type of the form element that changed is a file, if it is, we assign the name of the selected file as the value of fileInput. \nNext, the createPost() method allows users to create articles. Using FormData we append the form object from the page’s data property in string form to FormData with a data property. We do the same thing for file input but we append it to FormData with a files.image property. This is because for multipart data Strapi requires that the property be preceded by files i.e `files.${fieldname}`  and our fieldname from the article content-type is image.\nWith all that done, we should have our create article logic working fine.\n\nThe frontend repo for this tutorial can be found [here](https://github.com/oviecodes/nuxt-strapi-auth)\n\nThe backend repo for this tutorial can be found [here](https://github.com/oviecodes/strapi-auth)\n\nSo devs, we’ve come to the end of this tutorial. I hope you now have what it takes to tackle Strapi authentication with NuxtJs in your arsenal. Stay tuned until the next tutorial.\n\n> **Please note:** Since we initially published this blog post, we released new versions of Strapi and tutorials may be outdated. Sorry for the inconvenience if it's the case. Please help us [by reporting it here](https://github.com/strapi/community-content/issues/new/choose).\n\n---\n\nGet started with Strapi by creating a project using a [starter](https://strapi.io/starters) or trying our [live demo](https://strapi.io/demo). Also, join our [academy]((https://academy.strapi.io)) to become a Strapi expert, and consult our [forum](https://forum.strapi.io) if you have any questions. We will be there to help you.\n<p align=\"center\">\n<a href=\"https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html#_1-install-strapi-and-create-a-new-project\">\n<img src=\"https://assets.strapi.io/uploads/Get_Started_e4e026ce55.svg#small\" />\n</a>\n</p>\nSee you soon!","user":41,"created_at":"2021-02-02T10:32:40.021Z","updated_at":"2021-03-18T10:11:05.062Z","published_at":"2021-02-08T13:12:18.831Z"}]},{"__component":"slices.newsletter-banner","id":93,"newsletter":null}],"postCategories":[{"id":13,"name":"Guides & Tutorials","created_at":"2020-09-09T13:29:35.969Z","updated_at":"2020-09-09T13:29:35.969Z"}]}]